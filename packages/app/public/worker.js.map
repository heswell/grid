{"version":3,"file":"worker.js","sources":["../../utils/src/logging.js","../../data-remote/src/remote-websocket-connection.js","../../utils/src/event-emitter.js","../../utils/src/nanoid/index.js","../../utils/src/array-utils.js","../../utils/src/constants.js","../../utils/src/filter-utils.js","../../utils/src/column-utils.js","../../utils/src/range-utils.js","../../utils/src/group-utils.js","../../utils/src/row-utils.js","../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/bisector.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/bisect.js","../../../node_modules/d3-array/src/count.js","../../../node_modules/d3-array/src/extent.js","../../../node_modules/d3-array/src/identity.js","../../../node_modules/d3-array/src/array.js","../../../node_modules/d3-array/src/constant.js","../../../node_modules/d3-array/src/ticks.js","../../../node_modules/d3-array/src/nice.js","../../../node_modules/d3-array/src/threshold/sturges.js","../../../node_modules/d3-array/src/bin.js","../../data-store/src/table.js","../../data-store/src/selection-model.js","../../data-store/src/sort.js","../../data-store/src/group-utils.js","../../data-store/src/range-utils.js","../../data-store/src/rowset/rowSet.js","../../data-store/src/group-iterator.js","../../data-store/src/rowset/group-rowset.js","../../data-store/src/update-queue.js","../../data-store/src/data-store.js","../../data-store/src/worker-table.js","../../data-store/src/data-store-connection.js","../../data-remote/src/test-data-collection.js","../../data-remote/src/servers/vuu/messages.js","../../data-remote/src/servers/vuu/keyset.js","../../data-remote/src/servers/vuu/buffer-range.js","../../data-remote/src/servers/vuu/array-backed-moving-window.js","../../data-remote/src/servers/vuu/new-viewport.js","../../data-remote/src/servers/vuu/rpc-services.js","../../data-remote/src/servers/vuu/new-server-proxy.js","../../remote-worker/src/worker.js"],"sourcesContent":["export const logColor = {\n  plain : 'color: black; font-weight: normal',\n  blue : 'color: blue; font-weight: bold',\n  brown : 'color: brown; font-weight: bold',\n  green : 'color: green; font-weight: bold',\n}\n\nconst {plain} = logColor;\nexport const createLogger = (source, labelColor=plain, msgColor=plain) => ({\n  log: (msg, args='') => console.log(`[${Date.now()}]%c[${source}] %c${msg}`,labelColor, msgColor, args),\n  warn: (msg) => console.warn(`[${source}] ${msg}`)\n})\n","import { createLogger, logColor } from '@heswell/utils/src/logging';\n\n// TEST_DATA_COLLECTION\n// import { saveTestData } from './test-data-collection';\n\nconst logger = createLogger('WebsocketConnection', logColor.brown);\n\nconst connectionAttempts = {};\n\nconst setWebsocket = Symbol('setWebsocket');\nconst connectionCallback = Symbol('connectionCallback');\n\nexport default async function connect(\n  connectionString,\n  callback,\n  connectionStatusCallback,\n) {\n  return makeConnection(connectionString, (msg) => {\n    const { type } = msg;\n    if (type === 'connection-status') {\n      connectionStatusCallback(msg);\n    } else if (type === 'HB') {\n      console.log(`swallowing HB in WebsocketConnection`);\n    } else if (type === 'Welcome') {\n      // Note: we are actually resolving the connection before we get this session message\n      logger.log(`Session established clientId: ${msg.clientId}`);\n    } else {\n      callback(msg);\n    }\n  });\n}\n\nasync function reconnect(connection) {\n  console.log(`reconnect connection at ${connection.url}`);\n  makeConnection(connection.url, connection[connectionCallback], connection);\n}\n\nasync function makeConnection(url, callback, connection) {\n  const connectionStatus =\n    connectionAttempts[url] ||\n    (connectionAttempts[url] = {\n      attemptsRemaining: 5,\n      status: 'not-connected',\n    });\n\n  try {\n    callback({ type: 'connection-status', status: 'connecting' });\n    const reconnecting = typeof connection !== 'undefined';\n    const ws = await createWebsocket(url);\n\n    console.log(\n      `%c⚡ %c${url}`,\n      'font-size: 24px;color: green;font-weight: bold;',\n      'color:green; font-size: 14px;',\n    );\n\n    if (reconnecting) {\n      connection[setWebsocket](ws);\n    } else {\n      connection = new Connection(ws, url, callback);\n    }\n\n    const status = reconnecting ? 'reconnected' : 'connected';\n\n    callback({ type: 'connection-status', status });\n\n    connection.status = status;\n\n    return connection;\n  } catch (evt) {\n    const retry = --connectionStatus.attemptsRemaining > 0;\n    callback({\n      type: 'connection-status',\n      status: 'not-connected',\n      reason: 'failed to connect',\n      retry,\n    });\n    if (retry) {\n      return makeConnectionIn(url, callback, connection, 10000);\n    }\n  }\n}\n\nconst makeConnectionIn = (url, callback, connection, delay) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(makeConnection(url, callback, connection));\n    }, delay);\n  });\n\nconst createWebsocket = (connectionString) =>\n  new Promise((resolve, reject) => {\n    //TODO add timeout\n    const ws = new WebSocket('ws://' + connectionString);\n    ws.onopen = () => resolve(ws);\n    ws.onerror = (evt) => reject(evt);\n  });\n\nclass Connection {\n  constructor(ws, url, callback) {\n    this.url = url;\n    this[connectionCallback] = callback;\n    this[setWebsocket](ws);\n    this.status = 'ready';\n    this.requiresAuthentication = true;\n    this.requiresLogin = true;\n  }\n\n  reconnect() {\n    reconnect(this);\n  }\n\n  [setWebsocket](ws) {\n    const callback = this[connectionCallback];\n\n    ws.onmessage = (evt) => {\n      // TEST DATA COLLECTION\n        // saveTestData(evt.data, 'server');\n      const message = JSON.parse(evt.data);\n      // console.log(`%c<<< [${new Date().toISOString().slice(11,23)}]  (WebSocket) ${message.type || JSON.stringify(message)}`,'color:white;background-color:blue;font-weight:bold;');\n      callback(message);\n    };\n\n    ws.onerror = (evt) => {\n      console.log(\n        `%c⚡ %c${this.url}`,\n        'font-size: 24px;color: red;font-weight: bold;',\n        'color:red; font-size: 14px;',\n      );\n      callback({\n        type: 'connection-status',\n        status: 'disconnected',\n        reason: 'error',\n      });\n      if (this.status !== 'closed') {\n        reconnect(this);\n        this.send = queue;\n      }\n    };\n\n    ws.onclose = (evt) => {\n      console.log(\n        `%c⚡ %c${this.url}`,\n        'font-size: 24px;color: orange;font-weight: bold;',\n        'color:orange; font-size: 14px;',\n      );\n      callback({\n        type: 'connection-status',\n        status: 'disconnected',\n        reason: 'close',\n      });\n      if (this.status !== 'closed') {\n        reconnect(this);\n        this.send = queue;\n      }\n    };\n\n    const send = (msg) => {\n      // console.log(`%c>>>  (WebSocket) ${JSON.stringify(msg)}`,'color:blue;font-weight:bold;');\n      ws.send(JSON.stringify(msg));\n    };\n\n    const warn = (msg) => {\n      logger.log(`Message cannot be sent, socket closed: ${msg.type}`);\n    };\n\n    const queue = (msg) => {\n      console.log(\n        `queuing message ${JSON.stringify(msg)} until websocket reconnected`,\n      );\n    };\n\n    this.send = send;\n\n    this.close = () => {\n      console.log('[Connection] close websocket');\n      this.status = 'closed';\n      ws.close();\n      this.send = warn;\n    };\n  }\n}\n","\nexport class EventEmitter {\n\n    constructor() {\n        this._events = {};\n    }\n\n    addListener(type, listener) {\n        if (!this._events) {\n            this._events = {};\n        }\n\n        if (!this._events[type]) {\n            this._events[type] = listener;\n        } else if (Array.isArray(this._events[type])) {\n            this._events[type].push(listener);\n        } else {\n            this._events[type] = [this._events[type], listener];\n        }\n\n    }\n\n    removeListener(type, listener) {\n        let list, position, length, i;\n\n        if (!this._events || !this._events[type]) {\n            return;\n        }\n\n        list = this._events[type];\n        length = list.length;\n        position = -1;\n\n        if (list === listener) {\n            delete this._events[type];\n\n        } else if (Array.isArray(list)) {\n            for (i = length; i-- > 0;) {\n                if (list[i] === listener) {\n                    position = i;\n                    break;\n                }\n            }\n\n            if (position < 0) {\n                return;\n            }\n\n            if (list.length === 1) {\n                list.length = 0;\n                delete this._events[type];\n            } else {\n                list.splice(position, 1);\n            }\n        }\n\n    }\n\n    removeAllListeners(type) {\n        if (!this._events) {\n            return;\n        } else if (type === undefined){\n            delete this._events;\n        } else {\n            delete this._events[type];\n        }\n    }\n\n    emit(type, ...args) {\n        if (this._events) {\n            const handler = this._events[type];\n            if (handler){\n                invokeHandler(handler, type, args);\n            }\n            const wildcardHandler = this._events['*'];\n            if (wildcardHandler){\n                invokeHandler(wildcardHandler, type, args);\n            }\n        }\n    }\n\n    once(type, listener) {\n\n        const handler = (evtName, message) => {\n            this.removeListener(evtName, handler);\n            listener(evtName, message);\n        };\n\n        this.on(type, handler);\n\n    }\n\n    on(type, listener) {\n        return this.addListener(type, listener);\n    }\n\n}\n\nfunction invokeHandler(handler, type, args){\n    if (Array.isArray(handler)){\n        handler.slice().forEach(listener => invokeHandler(listener, args));\n    } else {\n        switch (args.length) {\n            case 0:\n                handler(type);\n                break;\n            case 1:\n                handler(type, args[0]);\n                break;\n            case 2:\n                handler(type, args[0], args[1]);\n                break;\n            // slower\n            default:\n                handler.call(null, type, ...args);\n        }\n    }\n}\n\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\n","// This is the index.browser.js file from nanoid\n// couldn't get original code to work as npm import without crypro warnings -\n// seemed to be picking up node version, not browser version\n\nexport const uuid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n","export function arrayOfIndices(length){\n  // not the neatest, but far and away the fastest way to do this ...\n  const result = Array(length);\n  for (let i=0;i<length;i++){\n      result[i] = i;\n  }\n  return result;\n}\n\nexport function partition(array, test, pass = [], fail = []) {\n\n  for (let i = 0, len = array.length; i < len; i++) {\n      (test(array[i], i) ? pass : fail).push(array[i]);\n  }\n\n  return [pass, fail];\n}\n\n","export const DataTypes = {\n  ROW_DATA: 'rowData',\n  FILTER_DATA: 'filterData',\n  FILTER_BINS: 'filterBins'\n};\n\nexport const ASC = 'asc';\nexport const DSC = 'dsc';\n","\nexport const AND = 'AND';\nexport const EQUALS = 'EQ';\nexport const GREATER_THAN = 'GT';\nexport const GREATER_EQ = 'GE';\nexport const IN = 'IN';\nexport const LESS_EQ = 'LE';\nexport const LESS_THAN = 'LT';\nexport const NOT_IN = 'NOT_IN';\nexport const NOT_STARTS_WITH = 'NOT_SW';\nexport const OR = 'OR';\nexport const STARTS_WITH = 'SW';\n\nexport const SET_FILTER_DATA_COLUMNS = [\n    {name: 'name', flex: 1},\n    {name: 'count', width: 40, type: 'number'},\n    {name: 'totalCount', width: 40, type: 'number'}\n];\n\nexport const BIN_FILTER_DATA_COLUMNS = [\n    {name: 'bin'},\n    {name: 'count'},\n    {name: 'bin-lo'},\n    {name: 'bin-hi'}\n];\nexport default function filterRows(rows, columnMap, filter) {\n    return applyFilter(rows, functor(columnMap, filter));\n}\n\nexport function addFilter(existingFilter, filter) {\n\n    if (includesNoValues(filter)){\n        const {colName} = filter;\n        existingFilter = removeFilterForColumn(existingFilter, {name:colName});\n    } else if (includesAllValues(filter)){\n        // A filter that returns all values is a way to remove filtering for this column\n        return removeFilterForColumn(existingFilter, {name: filter.colName});\n    }\n\n    if (!existingFilter) {\n        return filter;\n    } else if (!filter) {\n        return existingFilter;\n    }\n\n    if (existingFilter.type === AND && filter.type === AND) {\n        return { type: 'AND', filters: combine(existingFilter.filters, filter.filters) };\n    } else if (existingFilter.type === 'AND') {\n        const filters = replaceOrInsert(existingFilter.filters, filter);\n        return filters.length > 1\n            ? { type: 'AND', filters  }\n            : filters[0];\n    } else if (filter.type === 'AND') {\n        return { type: 'AND', filters: filter.filters.concat(existingFilter) };\n    } else if (filterEquals(existingFilter, filter, true)) {\n        return filter;\n    } else if (sameColumn(existingFilter, filter)){\n        return merge(existingFilter, filter);\n    } else {\n        return { type: 'AND', filters: [existingFilter, filter] };\n    }\n}\n\nexport function includesNoValues(filter) {\n    // TODO make sure we catch all cases...\n    if (!filter){\n        return false;\n    } else if (filter.type === IN && filter.values.length === 0) {\n        return true;\n    } else if (filter.type === AND && filter.filters.some(f => includesNoValues(f))){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function getFilterColumn(column) {\n    return column.isGroup ? column.columns[0] : column;\n}\nexport function functor(columnMap, filter) {\n    //TODO convert filter to include colIdx ratherthan colName, so we don't have to pass cols\n    switch (filter.type) {\n    case IN: return testInclude(columnMap, filter);\n    case NOT_IN: return testExclude(columnMap, filter);\n    case EQUALS: return testEQ(columnMap, filter);\n    case GREATER_THAN: return testGT(columnMap, filter);\n    case GREATER_EQ: return testGE(columnMap, filter);\n    case LESS_THAN: return testLT(columnMap, filter);\n    case LESS_EQ: return testLE(columnMap, filter);\n    case STARTS_WITH: return testSW(columnMap, filter);\n    case NOT_STARTS_WITH: return testSW(columnMap, filter, true);\n    case AND: return testAND(columnMap, filter);\n    case OR: return testOR(columnMap, filter);\n    default:\n        console.log(`unrecognized filter type ${filter.type}`);\n        return () => true;\n    }\n}\n\nfunction applyFilter(rows, filter) {\n    const results = [];\n    for (let i = 0; i < rows.length; i++) {\n        if (filter(rows[i])) {\n            results.push(rows[i]);\n        }\n    }\n    return results;\n}\n\nfunction testAND(cols, f) {\n    const filters = f.filters.map(f1 => functor(cols, f1));\n    return row => filters.every(fn => fn(row));\n}\n\nfunction testOR(cols, f) {\n    const filters = f.filters.map(f1 => functor(cols, f1));\n    return row => filters.some(fn => fn(row));\n}\n\nfunction testSW(cols, f, inversed = false) {\n    const value = f.value.toLowerCase();\n    return inversed\n        ? row => row[cols[f.colName]].toLowerCase().indexOf(value) !== 0\n        : row => row[cols[f.colName]].toLowerCase().indexOf(value) === 0;\n\n}\n\nfunction testGT(cols, f) {\n    return row => row[cols[f.colName]] > f.value;\n}\n\nfunction testGE(cols, f) {\n    return row => row[cols[f.colName]] >= f.value;\n}\n\nfunction testLT(cols, f) {\n    return row => row[cols[f.colName]] < f.value;\n}\n\nfunction testLE(cols, f) {\n    return row => row[cols[f.colName]] <= f.value;\n}\n\nfunction testInclude(cols, f) {\n    // eslint-disable-next-line eqeqeq\n    return row => f.values.findIndex(val => val == row[cols[f.colName]]) !== -1;\n}\n\n// faster to convert values to a keyed map\nfunction testExclude(cols, f) {\n    // eslint-disable-next-line eqeqeq\n    return row => f.values.findIndex(val => val == row[cols[f.colName]]) === -1;\n}\n\nfunction testEQ(cols, f) {\n    return row => row[cols[f.colName]] === f.value;\n}\n\nexport function shouldShowFilter(filterColumnName, column) {\n    const filterColumn = getFilterColumn(column);\n    if (filterColumn.isGroup) {\n        return filterColumn.columns.some(col => col.name === filterColumnName);\n    } else {\n        return filterColumnName === filterColumn.name;\n    }\n}\n\nfunction includesAllValues(filter) {\n    if (!filter){\n        return false;\n    } else if (filter.type === NOT_IN && filter.values.length === 0) {\n        return true;\n    } else if (filter.type === STARTS_WITH && filter.value === ''){\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// does f2 only narrow the resultset from f1\nexport function extendsFilter(f1=null, f2=null) {\n    // ignore filters which are identical\n    // include or exclude filters which add values\n    if (f2 === null){\n        return false\n    } else if (f1 === null) {\n        return true;\n    }\n    if (f1.colName && f1.colName === f2.colName) {\n        if (f1.type === f2.type) {\n            switch (f1.type) {\n            case IN:\n                return f2.values.length < f1.values.length && containsAll(f1.values, f2.values);\n            case NOT_IN:\n                return f2.values.length > f1.values.length && containsAll(f2.values, f1.values);\n            case STARTS_WITH: return f2.value.length > f1.value.length && f2.value.indexOf(f1.value) === 0;\n                // more cases here such as GT,LT\n            default:\n            }\n        }\n\n    } else if (f1.colname && f2.colName) {\n        // different columns,always false\n        return false;\n    } else if (f2.type === AND && extendsFilters(f1, f2)) {\n        return true;\n    }\n\n    // safe option is to assume false, causing filter to be re-applied to base data\n    return false;\n}\n\nconst byColName = (a, b) => a.colName === b.colName ? 0 : a.colName < b.colName ? -1 : 1;\n\nfunction extendsFilters(f1, f2) {\n    if (f1.colName) {\n        const matchingFilter = f2.filters.find(f => f.colName === f1.colName);\n        return filterEquals(matchingFilter, f1, true);\n    } else if (f1.filters.length === f2.filters.length) {\n        // if the only differences are extra values in an excludes filter or fewer values in an includes filter\n        // then we are still extending the filter (i.e. narrowing the resultset)\n        const a = f1.filters.sort(byColName);\n        const b = f2.filters.slice().sort(byColName);\n\n        for (let i = 0; i < a.length; i++) {\n            if (!filterEquals(a[i], b[i], true) && !filterExtends(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    } else if (f2.filters.length > f1.filters.length){\n        return f1.filters.every(filter1 => {\n            const filter2 = f2.filters.find(f => f.colName === filter1.colName);\n            return filterEquals(filter1, filter2, true); // could also allow f2 extends f1\n        });\n    }\n}\n\n// If we add an IN filter and there is an existing NOT_IN, we would always expect the IN\n// values to exist in the NOT_IN set (as long as user interaction is driving the filtering)\nfunction replaceOrInsert(filters, filter) {\n    const {type, colName, values} = filter;\n    if (type === IN || type === NOT_IN) {\n        const otherType = type === IN ? NOT_IN : IN;\n        // see if we have an 'other' entry\n        let idx = filters.findIndex(f => f.type === otherType && f.colName === colName);\n        if (idx !== -1){\n            const {values: existingValues} = filters[idx];\n            if (values.every(value => existingValues.indexOf(value) !== -1)){\n                if (values.length === existingValues.length){\n                    // we simply remove the existing 'other' filter ...\n                    return filters.filter((f, i) => i !== idx);\n                } else {\n                    // ... or strip the matching values from the 'other' filter values\n                    let newValues = existingValues.filter(value => !values.includes(value));\n                    return filters.map((filter,i) => i === idx ? {...filter, values: newValues}: filter)\n\n                }\n            }\n            else if (values.some(value => existingValues.indexOf(value) !== -1)){\n                console.log(`partial overlap between IN and NOT_IN`)\n\n            }\n        } else {\n            idx = filters.findIndex(f => f.type === type && f.colName === filter.colName);\n            if (idx !== -1) {\n                return filters.map((f, i) => i === idx ? merge(f, filter) : f);\n            }\n        }\n    }\n\n    return filters.concat(filter);\n}\n\nfunction merge(f1, f2){\n    const {type: t1} = f1;\n    const {type: t2} = f2;\n    const sameType = t1 === t2 ? t1 : '';\n\n    if (includesNoValues(f2)){\n        return f2;\n    } else if ((t1 === IN && t2 === NOT_IN) || (t1 === NOT_IN && t2 === IN)){\n        // do the two sets cancel each other out ?\n        if (f1.values.length === f2.values.length && f1.values.every(v => f2.values.includes(v))){\n            if (t1 === IN && t2 === NOT_IN){\n                return {\n                    colName: f1.colName,\n                    type: IN,\n                    values: []\n                }\n            } else {\n                return null;\n            }\n            return null;\n        } else if (f1.values.length > f2.values.length){\n            if (f2.values.every(v => f1.values.includes(v))){\n                return {\n                    ...f1,\n                    values: f1.values.filter(v => !f2.values.includes(v))\n                }\n            }\n        }\n\n    } else if (sameType === IN || sameType === NOT_IN){\n        return {\n            ...f1,\n            values: f1.values.concat(f2.values.filter(v => !f1.values.includes(v)))\n        }\n    } else if (sameType === STARTS_WITH){\n        return {\n            type: OR,\n            filters: [f1, f2]\n        }\n    } else if (sameType === NOT_STARTS_WITH){\n        return {\n            type: AND,\n            filters: [f1, f2]\n        }\n\n    }\n\n    return f2;\n\n}\n\nfunction combine(existingFilters, replacementFilters) {\n\n    // TODO need a safer REGEX here\n    function equivalentType({ type: t1 }, { type: t2 }) {\n        return (t1 === t2) || (t1[0] === t2[0]);\n    }\n\n    const replaces = (existingFilter, replacementFilter) => {\n        return existingFilter.colName === replacementFilter.colName &&\n            equivalentType(existingFilter, replacementFilter);\n    };\n\n    const stillApplicable = existingFilter => replacementFilters.some(\n        replacementFilter => replaces(existingFilter, replacementFilter)) === false;\n\n    return existingFilters.filter(stillApplicable).concat(replacementFilters);\n}\n\nexport function removeFilter(sourceFilter, filterToRemove) {\n    if (filterEquals(sourceFilter, filterToRemove, true)) {\n        return null;\n    } else if (sourceFilter.type !== AND) {\n        throw Error(`removeFilter cannot remove ${JSON.stringify(filterToRemove)} from ${JSON.stringify(sourceFilter)}`);\n    } else {\n        const filters = sourceFilter.filters.filter(f => !filterEquals(f, filterToRemove));\n        return filters.length > 0 ? { type: AND, filters } : null;\n    }\n}\n\nexport function splitFilterOnColumn(filter, columnName) {\n    if (!filter){\n        return [null,null];\n    } else if (filter.colName === columnName) {\n        return [filter,null];\n    } else if (filter.type !== 'AND') {\n        return [null, filter];\n    } else {\n        const [[columnFilter=null], filters] = partition(filter.filters, f => f.colName === columnName);\n        return filters.length === 1\n            ? [columnFilter,filters[0]]\n            : [columnFilter, { type: 'AND', filters }];\n    }\n}\n\nexport const overrideColName = (filter, colName) => {\n    const {type} = filter;\n    if (type === AND || type === OR){\n        return {\n            type,\n            filters: filter.filters.map(f => overrideColName(f, colName))\n        }\n    } else {\n        return {...filter, colName}\n    }\n}\n\nexport function extractFilterForColumn(filter, columnName) {\n    if (!filter) {\n        return null;\n    }\n    const { type, colName } = filter;\n    switch (type) {\n        case AND:\n        case OR:\n            return collectFiltersForColumn(type, filter.filters, columnName);\n\n        default:\n            return colName === columnName ? filter : null;\n    }\n}\n\nfunction collectFiltersForColumn(type, filters, columName){\n    const results = [];\n    filters.forEach(filter => {\n        const ffc = extractFilterForColumn(filter, columName);\n        if (ffc !== null){\n            results.push(ffc);\n        }\n    })\n    if (results.length === 1){\n        return results[0];\n    } else {\n        return {\n            type,\n            filters: results\n        }\n    }\n}\n\nexport function includesColumn(filter, column) {\n    if (!filter) {\n        return false;\n    }\n    const { type, colName, filters } = filter;\n    switch (type) {\n    case AND: return filters.some(f => includesColumn(f, column));\n    default: return colName === column.name;\n    }\n}\n\nexport function removeFilterForColumn(sourceFilter, column) {\n    const colName = column.name;\n    if (!sourceFilter){\n        return null;\n    } else if (sourceFilter.colName === colName) {\n        return null;\n    } else if (sourceFilter.type === AND || sourceFilter.type === OR) {\n        const {type, filters} = sourceFilter;\n        const otherColFilters = filters.filter(f => f.colName !== colName);\n        switch(otherColFilters.length){\n            case 0: return null;\n            case 1: return otherColFilters[0];\n            default: return { type, otherColFilters }\n        }\n    } else {\n        return sourceFilter;\n    }\n}\n\nconst sameColumn = (f1, f2) => f1.colName === f2.colName;\n\nexport function filterEquals(f1, f2, strict = false) {\n    if (f1 && f1){\n        const isSameColumn = sameColumn(f1,f2);\n        if (!strict) {\n            return isSameColumn;\n        } else {\n            return isSameColumn &&\n                f1.type === f2.type &&\n                f1.mode === f2.mode &&\n                f1.value === f2.value &&\n                sameValues(f1.values, f2.values);\n        }\n    } else {\n        return false;\n    }\n}\n\n// does f2 extend f1 ?\nfunction filterExtends(f1, f2) {\n    if (f1.type === IN && f2.type === IN) {\n        return f2.values.length < f1.values.length && containsAll(f1.values, f2.values);\n    } else if (f1.type === NOT_IN && f2.type === NOT_IN) {\n        return f2.values.length > f1.values.length && containsAll(f2.values, f1.values);\n    } else {\n        return false;\n    }\n}\n\n//TODO roll this into next function\nexport function projectFilterData(filterRows) {\n    return filterRows.map((row, idx) => [idx, 0, 0, null, row.name, row.count]);\n}\n\n// The folowing are array utilities but they are defined here as they are not suitable for large arrays, so we'll\n// keep them local to filters\nfunction containsAll(superList, subList) {\n    for (let i = 0, len = subList.length; i < len; i++) {\n        if (superList.indexOf(subList[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// only suitable for small arrays of simple types (e.g. filter values)\nfunction sameValues(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    } else if (arr1.length === arr2.length) {\n        const a = arr1.slice().sort();\n        const b = arr2.slice().sort();\n        return a.join('|') === b.join('|');\n    }\n    return false;\n}\n\nfunction partition(list, test1, test2=null) {\n    const results1 = [];\n    const misses = [];\n    const results2 = test2===null ? null : [];\n\n    for (let i = 0; i < list.length; i++) {\n        if (test1(list[i])) {\n            results1.push(list[i]);\n        } else if (test2 !== null && test2(list[i])) {\n            results2.push(list[i]);\n        } else {\n            misses.push(list[i]);\n        }\n    }\n\n    return test2 === null\n        ? [results1, misses]\n        : [results1, results2, misses];\n}\n","import {\n  functor,\n  overrideColName\n} from './filter-utils';\n\nconst SORT_ASC = 'asc';\n\nexport function mapSortCriteria(sortCriteria, columnMap, metadataOffset=0) {\n  return sortCriteria.map(s => {\n      if (typeof s === 'string') {\n          return [columnMap[s] + metadataOffset, 'asc'];\n      } else if (Array.isArray(s)) {\n          const [columnName, sortDir] = s;\n          return [columnMap[columnName] + metadataOffset, sortDir || SORT_ASC];\n      } else {\n          throw Error('columnUtils.mapSortCriteria invalid input');\n      }\n\n  });\n}\n\nexport const toKeyedColumn = (column, key) =>\n  typeof column === 'string'\n      ? { key, name: column }\n      : typeof column.key === 'number'\n          ? column\n          : {...column, key};\n\nexport function buildColumnMap(columns){\n  const start = metadataKeys.count;\n  if (columns){\n      return columns.reduce((map, column, i) => {\n          if (typeof column === 'string'){\n              map[column] = start + i;\n          } else if (typeof column.key === 'number') {\n              map[column.name] = column.key;\n          } else {\n              map[column.name] = start + i;\n          }\n          return map;\n      },{})\n  } else {\n      return null;\n  }\n}\n\nexport function projectUpdates(updates){\n    const results = [];\n    const metadataOffset = metadataKeys.count - 2;\n    for (let i=0;i<updates.length; i+=3){\n        results[i] = updates[i] + metadataOffset;\n        results[i+1] = updates[i+1];\n        results[i + 2] = updates[i+2];\n    }\n    return results;\n}\n\nexport function projectColumns(tableRowColumnMap, columns){\n  const columnCount = columns.length;\n  const {IDX, RENDER_IDX, DEPTH, COUNT, KEY, SELECTED, count} = metadataKeys;\n  return (startIdx, offset, selectedRows=[]) => (row,i) => {\n      // selectedRows are indices of rows within underlying dataset (not sorted or filtered)\n      // row is the original row from this set, with original index in IDX pos, which might\n      // be overwritten with a different value below if rows are sorted/filtered\n      const baseRowIdx = row[IDX];\n      const out = [];\n      for (let i=0; i < columnCount;i++){\n          const colIdx = tableRowColumnMap[columns[i].name];\n          out[count+i] = row[colIdx];\n      }\n\n      out[IDX] = startIdx + i + offset;\n      out[RENDER_IDX] = 0;\n      out[DEPTH] = 0;\n      out[COUNT] = 0;\n      out[KEY] = row[tableRowColumnMap.KEY];\n      out[SELECTED] = selectedRows.includes(baseRowIdx) ? 1 : 0;\n      return out;\n  }\n}\n\nexport function projectColumnsFilter(map, columns, meta, filter){\n  const length = columns.length;\n  const {IDX, RENDER_IDX, DEPTH, COUNT, KEY, SELECTED} = meta;\n\n  // this is filterset specific where first col is always value\n  const fn = filter ? functor(map, overrideColName(filter, 'name'))  : () => true;\n  return startIdx => (row,i) => {\n      const out = [];\n      for (let i=0;i<length;i++){\n          const colIdx = map[columns[i].name];\n          out[i] = row[colIdx];\n      }\n      // assume row[0] is key for now\n      // out.push(startIdx+i, 0, 0, row[0]);\n      out[IDX] = startIdx+i;\n      out[RENDER_IDX] = 0;\n      out[DEPTH] = 0;\n      out[COUNT] = 0;\n      out[KEY] = row[map.KEY];\n      out[SELECTED] = fn(row) ? 1 : 0;\n\n      return out;\n  }\n}\n\nexport function getFilterType(column){\n  return column.filter || filterTypeFromColumnType(column);\n}\n\n// {name: 'Price', 'type': {name: 'price'}, 'aggregate': 'avg'},\n// {name: 'MarketCap', 'type': {name: 'number','format': 'currency'}, 'aggregate': 'sum'},\n\nconst filterTypeFromColumnType = column => {\n    // TODO add remaining filter types\n    switch (getDataType(column)){\n        case 'number': return 'number'\n        default: return 'set';\n    }\n\n}\n\nexport function getDataType({type=null}){\n  if (type === null){\n      return 'set';\n  } else if (typeof type === 'string'){\n      return type;\n  } else {\n      switch(type.name){\n          case 'price':\n              return 'number';\n          default:\n              return type.name;\n      }\n  }\n\n}\n\nexport const metadataKeys = {\n    IDX: 0,\n    RENDER_IDX: 1,\n    IS_LEAF: 2,\n    IS_EXPANDED: 3,\n    DEPTH: 4,\n    COUNT: 5,\n    KEY: 6,\n    SELECTED: 7,\n    // PARENT_IDX: 8,\n    // IDX_POINTER: 9,\n    // FILTER_COUNT: 10,\n    // NEXT_FILTER_IDX: 11,\n    count: 8\n}\n\n","export function getFullRange({lo,hi}, bufferSize=0, rowCount=Number.MAX_SAFE_INTEGER){\n  if (bufferSize === 0){\n    return {from: lo, to: Math.min(hi, rowCount)};\n  } else if (lo === 0){\n    return {from: lo, to: Math.min(hi + bufferSize, rowCount)};\n  } else {\n    const rangeSize = hi - lo;\n    const buff = Math.round(bufferSize / 2);\n    const shortfallBefore = lo - buff < 0;\n    const shortFallAfter = rowCount - (hi + buff) < 0;\n\n    if (shortfallBefore && shortFallAfter){\n      return {from: 0, to: rowCount}\n    } else if (shortfallBefore){\n      return {from: 0, to: rangeSize + bufferSize}\n    } else if (shortFallAfter){\n      return {from: Math.max(0,rowCount - (rangeSize + bufferSize)), to: rowCount}\n    } else {\n      return {from: lo-buff, to: hi + buff}\n    }\n  }\n}\n\nexport function resetRange({lo,hi,bufferSize=0}){\n  return {\n      lo: 0,\n      hi: hi-lo,\n      bufferSize,\n      reset: true\n  };\n}\n\n\nexport class WindowRange {\n  constructor(from, to){\n    this.from = from;\n    this.to = to;\n  }\n\n  isWithin(index) {\n    return index >= this.from && index < this.to;\n  }\n\n  //find the overlap of this range and a new one\n  overlap(from, to){\n    return (from >= this.to || to < this.from)\n      ? [0, 0]\n      : [Math.max(from, this.from), Math.min(to, this.to)]\n  }\n\n  copy(){\n    return new WindowRange(this.from, this.to);\n  }\n}\n\n\n","import {ASC} from './constants';\n\nexport function indexOfCol(key, cols = null) {\n  if (cols !== null) {\n      for (let i = 0; i < cols.length; i++) {\n          // check both while we transition from groupBy to extendedGroupby\n          // groupBy = [colName, dir] extendedGroupby = [colIdx, dir,colName]\n          const [col1, , col2] = cols[i];\n          if (col1 === key || col2 === key) {\n              return i;\n          }\n      }\n  }\n  return -1;\n}\n\n// should be called toggleColumnInGroupBy\nexport function updateGroupBy(existingGroupBy = null, column/*, replace = false*/) {\n  console.log(``)\n  if (existingGroupBy === null) {\n      return [[column.name, ASC]];\n  } else {\n      return indexOfCol(column.name, existingGroupBy) === -1\n          ? existingGroupBy.concat([[column.name, ASC]])\n          : existingGroupBy.length === 1\n              ? null\n              : existingGroupBy.filter(([colName]) => colName !== column.name);\n  }\n}\n","export function addRowsToIndex(rows, index, indexField){\n  for (let idx = 0, len=rows.length; idx < len; idx++) {\n      index[rows[idx][indexField]] = idx;\n  }\n  return index;\n}\n\nexport function indexRows(rows, indexField) {\n  return addRowsToIndex(rows, {}, indexField)\n}\n\nexport function isEmptyRow(row){\n  return row[0] === undefined;\n}\n\n// TODO rename\nexport function update(rows, updates, {IDX}) {\n  const results = rows.slice();\n  const [[offsetIdx]] = rows;\n  for (let i = 0; i < updates.length; i++) {\n      const idx = updates[i][0] - offsetIdx;\n      // slow, refactor for performance\n      if (rows[idx]){\n        const row = rows[idx].slice();\n        for (let j = 1; j < updates[i].length; j += 3) {\n            row[updates[i][j]] = updates[i][j+2];\n        }\n        results[idx] = row;\n\n      } else {\n        console.log(`row not found in rows`)\n      }\n  }\n\n  return results;\n}\n\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n","export default function(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","export default function(x) {\n  return x;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","import {tickIncrement} from \"./ticks.js\";\n\nexport default function nice(start, stop, count) {\n  let prestep;\n  while (true) {\n    const step = tickIncrement(start, stop, count);\n    if (step === prestep || step === 0 || !isFinite(step)) {\n      return [start, stop];\n    } else if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n    }\n    prestep = step;\n  }\n}\n","import count from \"../count.js\";\n\nexport default function(values) {\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\n}\n","import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","/*global fetch */\nimport { EventEmitter } from '@heswell/utils/src/event-emitter';\n\nconst defaultUpdateConfig = {\n    applyUpdates: false,\n    applyInserts: false,\n    interval: 500\n}\n\nfunction buildColumnMap(columns){\n    if (columns){\n        const map = {IDX: 0, KEY: 1};\n        for (let i=0;i<columns.length;i++){\n            map[columns[i].name] = i+2;\n        }\n        return map;\n    } else {\n        return null;\n    }\n  }\n\nexport default class Table extends EventEmitter {\n\n    constructor(config){\n        super();\n        const {name, columns=null, primaryKey, dataPath, data, updates = {}} = config;\n        this.name = name;\n        this.primaryKey = primaryKey;\n        this.columns = columns;\n        this.keys = {};\n        this.index = {};\n        this.indices = [];\n        this.rows = [];\n        this.updateConfig = {\n            ...defaultUpdateConfig,\n            ...updates\n        }\n        this.inputColumnMap = undefined;\n        this.columnMap = buildColumnMap(columns);\n        this.columnCount = 0;\n        this.status = null;\n\n        if (data){\n            this.load(data);\n        } else if (dataPath){\n            this.fetchData(dataPath);\n        }\n\n        this.installDataGenerators(config);\n    }\n\n    update(rowIdx, ...updates){\n        const results = [];\n        let row = this.rows[rowIdx];\n        for (let i=0;i<updates.length;i+=2){\n            const colIdx = updates[i];\n            const value = updates[i+1];\n            results.push(colIdx, row[colIdx], value);\n            row[colIdx] = value;\n        }\n        this.emit('rowUpdated', rowIdx, results);\n    }\n\n    bulkUpdate(updates, doNotPublish){\n        const results = [];\n        for (let rowUpdate of updates){\n            const [idx] = rowUpdate;\n            const row = this.rows[idx];\n            const rowResult = [idx]\n            for (let i=1;i<rowUpdate.length;i+=2){\n                const colIdx = rowUpdate[i];\n                const value = rowUpdate[i+1];\n                rowResult.push(colIdx, row[colIdx], value);\n                row[colIdx] = value;\n            }\n            results.push(rowResult);\n        }\n        this.emit('rowsUpdated', results, doNotPublish);\n    }\n\n    // Don't think this is worth the overhead\n    // bulkUpdate(updates){\n        // const map = new Map();\n    // const results = [];\n    // let rowResult;\n    // for (let rowUpdate of updates){\n    //     const [idx] = rowUpdate;\n    //     const row = this.rows[idx];\n\n    //     if (map.has(idx)){\n    //         rowResult = map.get(idx);\n    //     } else {\n    //         results.push(rowResult = [idx]);\n    //         map.set(idx, rowResult)\n    //     }\n\n    //     for (let i=1;i<rowUpdate.length;i+=2){\n    //         const colIdx = rowUpdate[i];\n    //         const value = rowUpdate[i+1];\n    //         const pos = rowResult.indexOf(colIdx);\n    //         if (pos === -1 || (pos-1)%3){ // don't mistake a value for a column Index\n    //             rowResult.push(colIdx, row[colIdx], value);\n    //         } else {\n    //             // updates are in sequence so later update for same column replaces earlier value\n    //             rowResult.splice(pos+1, 2, row[colIdx], value);\n    //         }\n    //         row[colIdx] = value;\n    //     }\n    // }\n    // console.log(results)\n    // this.emit('rowsUpdated', results);\n    // }\n\n    insert(data){\n        let columnnameList = this.columns ? this.columns.map(c => c.name): null;\n        const idx = this.rows.length;\n        let row = this.rowFromData(idx, data, columnnameList);\n        this.rows.push(row);\n        this.emit('rowInserted', idx, row);\n    }\n\n    remove(key){\n        if (this.keys[key]){\n            const index = this.indices[key];\n            delete this.keys[key];\n            delete this.indices[key];\n            this.rows.splice(index,1);\n\n            for (let k in this.indices){\n                if (this.indices[k] > index){\n                    this.indices[k] -= 1;\n                }\n            }\n\n            this.emit('rowRemoved', this.name, key);\n\n        }\n    }\n\n    clear(){\n\n    }\n\n    toString(){\n        const out = ['\\n' + this.name];\n        out.splice.apply(out, [1,0].concat(this.rows.map(function(row){return row.toString();})));\n        return out.join('\\n');\n    }\n\n    async fetchData(url){\n        fetch(url,{\n\n        })\n            .then(data => data.json())\n            .then(json => {\n                console.log(`Table.loadData: got ${json.length} rows`);\n                this.load(json);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n    }\n\n    load(data){\n        let columnnameList = this.columns ? this.columns.map(c => c.name): null;\n        const rows = [];\n        for (let i=0;i<data.length;i++){\n            let row = this.rowFromData(i, data[i], columnnameList);\n            rows.push(row);\n        }\n        this.rows = rows;\n\n        if (this.columns === null){\n            this.columns = columnsFromColumnMap(this.inputColumnMap);\n            this.columnMap = buildColumnMap(this.columns);\n        }\n        this.status = 'ready';\n        this.emit('ready');\n        if (this.updateConfig && this.updateConfig.applyUpdates !== false){\n            setTimeout(() => {\n                this.applyUpdates();\n            },1000);\n        }\n        // move this\n        if (this.updateConfig && this.updateConfig.applyInserts !== false){\n            setTimeout(() => {\n                this.applyInserts();\n            },10000);\n        }\n    }\n\n    // Build a row [idx, primaryKey, ...data values]\n    rowFromData(idx, data, columnnameList){\n        // 2 metadata items for each row, the idx and unique key\n        const {index, primaryKey=null, columnMap: map} = this;\n\n        if (Array.isArray(data)){\n            const key = data[map[this.primaryKey] - 2];\n            index[key] = idx;\n            return [idx, key, ...data];\n        } else {\n            // This allows us to load data from objects as rows, without predefined columns, where\n            // not every row may have every column. How would we handle primary key ?\n            const columnMap = map || (this.columnMap = {IDX:0, KEY:1});\n            const colnames = columnnameList || Object.getOwnPropertyNames(data);\n            // why start with idx in 0 ?\n            const row = [idx];\n            let colIdx;\n            let key;\n\n            for (let i=0; i<colnames.length; i++){\n                const name = colnames[i];\n                const value = data[name];\n                if ((colIdx = columnMap[name]) === undefined){\n                    colIdx = columnMap[name] = 2 + this.columnCount++;\n                }\n                row[colIdx] = value;\n                // If we don't know the primary key, assume it is the first column for now\n                if ((name === primaryKey) || (primaryKey === null && i === 0)){\n                    key = value;\n                    index[value] = idx;\n                    row[map.KEY] = value;\n                }\n            }\n            return row;\n        }\n    }\n\n    //TODO move all these methods into an external helper\n    applyInserts(){\n\n        const idx = this.rows.length;\n        const newRow = this.createRow(idx);\n        if (newRow){\n            this.insert(newRow);\n        } else {\n            console.log(`createRow did not return a new row`);\n        }\n\n        setTimeout(() => this.applyInserts(),this.updateConfig.insertInterval | 100);\n\n    }\n\n    applyUpdates(){\n        const {rows, columnMap} = this;\n        // const count = Math.round(rows.length / 50);\n        const count = 100;\n\n        for (let i=0; i<count; i++){\n            const rowIdx = getRandomInt(rows.length - 1);\n            const update = this.updateRow(rowIdx, rows[rowIdx], columnMap);\n            if (update){\n                this.update(rowIdx, ...update);\n            }\n        }\n\n        setTimeout(() => this.applyUpdates(),this.updateConfig.interval);\n\n    }\n\n    createRow(idx){\n        console.warn(`createRow ${idx} must be implemented as a plugin`);\n        return null;\n    }\n\n    updateRow(idx, row, columnMap){\n        return null;\n    }\n\n    async installDataGenerators(config){\n        //console.warn(`installDataGenerators must be implemented by a more specific subclass`);\n    }\n\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction columnsFromColumnMap(columnMap){\n\n    const columnNames = Object.getOwnPropertyNames(columnMap);\n\n    return columnNames\n        .map(name => ({name, key: columnMap[name]}))\n        .sort(byKey)\n        .map(({name}) => ({name}));\n\n}\n\nfunction byKey(col1, col2){\n    return col1.key - col2.key;\n}\n","export const CHECKBOX = 'checkbox';\nexport const SINGLE_ROW = 'single-row';\nexport const MULTIPLE_ROW = 'multiple-row';\n\nexport const SelectionModelType = {\n  Checkbox: CHECKBOX,\n  SingleRow: SINGLE_ROW,\n  MultipleRow: MULTIPLE_ROW\n};\n\nconst {Checkbox, SingleRow, MultipleRow} = SelectionModelType;\n\nconst EMPTY = [];\n\nexport function selectionDiffers(selected1, selected2){\n  const len = selected1.length;\n  if (len !== selected2.length){\n      return true;\n  }\n  for (let i=0;i<len;i++){\n      if (selected1[i] !== selected2[i]){\n          return true;\n      }\n  }\n  return false;\n}\n\nexport default class SelectionModel {\n\n    constructor(selectionModelType=MultipleRow){\n      this.modelType = selectionModelType;\n    }\n\n    select({rows:selection, lastTouchIdx}, idx, rangeSelect, keepExistingSelection){\n        \n        let selected, deselected;\n\n        if (this.modelType === SingleRow){\n            [selection, selected, deselected] = this.handleRegularSelection(selection, idx);\n            lastTouchIdx = idx;\n        } else if (rangeSelect){\n            [selection, selected, deselected] = this.handleRangeSelection(selection, lastTouchIdx, idx);\n        } else if (keepExistingSelection || this.modelType === Checkbox){\n            [selection, selected, deselected] = this.handleIncrementalSelection(selection, idx);\n            lastTouchIdx = idx;\n        } else {\n            [selection, selected, deselected] = this.handleRegularSelection(selection, idx);\n            lastTouchIdx = idx;\n        }\n\n        return {\n          focusedIdx: idx,\n          lastTouchIdx,\n          rows: selection,\n          selected,\n          deselected\n        };\n\n    }\n\n    handleRegularSelection(selected, idx){\n        const pos = selected.indexOf(idx);\n        if (pos === -1){\n            const selection = [idx];\n            return [selection, selection, selected];\n        } else if (selected.length === 1){\n            return [EMPTY, EMPTY, selected];\n        } else {\n          return [EMPTY, EMPTY, remove(selected,idx)];\n        }\n    }\n\n    handleIncrementalSelection(selected, idx){\n        const pos = selected.indexOf(idx);\n        const len = selected.length;\n        const selection = [idx];\n\n        if (pos === -1){\n          if (len === 0){\n              return [selection, selection,EMPTY];\n            } else {\n                return [insert(selected,idx), selection, EMPTY];\n            }\n        } else {\n            if (len === 1){\n                return [EMPTY, EMPTY, selected];\n            } else {\n                return [remove(selected,idx), EMPTY, selection];\n            }\n        }\t\t\n    }\n\n    handleRangeSelection(selected, lastTouchIdx, idx){\n\n        const pos = selected.indexOf(idx);\n        const len = selected.length;\n\n        if (pos === -1){\n\n            if (len === 0){\n                const selection = makeRange(0,idx);\n                return [selection, selection, EMPTY];\n            } else if (len === 1){\n                const selection = makeRange(selected[0],idx);\n                selected = selected[0] < idx\n                  ? selection.slice(1)\n                  : selection.slice(0,-1);\n                return [selection, selected, EMPTY];\n            } else {\n                const selection = applyRange(selected,lastTouchIdx,idx);\n                return [selection, selection.filter(i => !selected.includes(i)), EMPTY];\n            }\n        } else {\n          // TODO <<<<<<<<<<<<<<<<<\n        }\n    }\n\n};\n\nfunction applyRange(arr, lo, hi){\n\n    if (lo > hi) {[lo, hi] = [hi, lo];}\n\n    const ranges = getRanges(arr);\n    const newRange = new Range(lo,hi);\n    let newRangeAdded = false;\n    const ret = [];\n\n    for (let i=0;i<ranges.length;i++){\n        const range = ranges[i];\n\n        if (!range.overlaps(newRange)){\n            if (range.start < newRange.start){\n                for (let idx=range.start;idx<=range.end;idx++){\n                    ret.push(idx);\n                }\n            } else {\n                for (let idx=newRange.start;idx<=newRange.end;idx++){\n                    ret.push(idx);\n                }\n                newRangeAdded = true;\n                for (let idx=range.start;idx<=range.end;idx++){\n                    ret.push(idx);\n                }\n            }\n        } else if (!newRangeAdded){\n            for (let idx=newRange.start;idx<=newRange.end;idx++){\n                ret.push(idx);\n            }\n            newRangeAdded = true;\n        }\n    }\n\n    if (!newRangeAdded){\n        for (let idx=newRange.start;idx<=newRange.end;idx++){\n            ret.push(idx);\n        }\n    }\n\n    return ret;\n}\n\nfunction getRanges(arr){\n\n    const ranges = [];\n    let range;\n\n    for (let i=0;i<arr.length;i++){\n        if (range && range.touches(arr[i])){\n            range.extend(arr[i]);\n        } else {\n            ranges.push(range = new Range(arr[i]));\n        }\n    }\n\n    return ranges;\n\n}\n\nclass Range {\n\n    constructor(start, end=start){\n        this.start = start;\n        this.end = end;\n    }\n\n    extend(idx){\n        if (idx >= this.start && idx > this.end){\n            this.end = idx;\n        }\n    }\n\n    touches(idx){\n        return this.end === idx-1;\n    }\n\n    overlaps(that){\n        return !(this.end < that.start || this.start > that.end);\n    }\n\n    contains(idx){\n        return this.start <= idx && this.end >= idx;\n    }\n\n    toString(){\n        return `[${this.start}:${this.end}]`;\n    }\n}\n\nfunction makeRange(lo, hi){\n    if (lo > hi) {[lo, hi] = [hi, lo];}\n\n    const range = [];\n    for (let idx=lo;idx<=hi;idx++){\n        range.push(idx);\n    }\n    return range;\n}\n\nfunction remove(arr, idx){\n    const ret = [];\n    for (let i=0;i<arr.length;i++){\n        if (idx !== arr[i]){\n            ret.push(arr[i]);\n        }\n    }\n    return ret;\n}\n\nfunction insert(arr, idx){\n    const ret = [];\n    for (let i=0;i<arr.length;i++){\n        if (idx !== null && idx < arr[i]){\n            ret.push(idx);\n            idx = null;\n        }\n        ret.push(arr[i]);\n    }\n    if (idx !== null){\n        ret.push(idx);\n    }\n    return ret;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {ASC, DSC, mapSortCriteria} from '@heswell/utils';\n\nexport function sortableFilterSet(filterSet){\n    if (filterSet.length === 0){\n        return filterSet;\n    } else if (Array.isArray(filterSet[0])){\n        return filterSet;\n    } else {\n        return filterSet.map(idx => [idx,null]);\n    }\n}\n\nexport function sortExtend(sortSet, rows, newSortCols, columnMap){\n    sort2ColsAdd1(sortSet, rows, newSortCols, columnMap)\n}\n\nexport function sort(sortSet,rows,sortCols,columnMap){\n    const sortCriteria = mapSortCriteria(sortCols, columnMap);\n    const count = sortCriteria.length;\n    const sortFn = count === 1 ? sort1 : count === 2 ? sort2 : count === 3 ? sort3 : sortAll;\n    sortFn(sortSet,rows,sortCriteria);\n}\n\nfunction sort2ColsAdd1(sortSet, rows, sortCols, columnMap){\n    const len = sortSet.length;\n    const sortCriteria = mapSortCriteria(sortCols, columnMap);\n    const [colIdx2] = sortCriteria[1];\n    for (let i=0;i<len;i++){\n        sortSet[i][2] = rows[sortSet[i][0]][colIdx2];\n    }\n    // This does not take direction into account\n    sortSet.sort((a,b) => {\n        return a[1] > b[1] ? 1 : b[1] > a[1] ? -1\n            : a[2] > b[2] ? 1 : b[2] > a[2] ? -1 : 0;\n    });\n}\n\nfunction sort1(sortSet,rows,[[colIdx, direction]]){\n    const len = sortSet.length;\n    for (let i=0;i<len;i++){\n        const idx = sortSet[i][0];\n        sortSet[i][1] = rows[idx][colIdx];\n    }\n    if (direction === ASC){\n        sortSet.sort((a,b) => {\n            return a[1] > b[1] ? 1 : b[1] > a[1] ? -1 : 0;\n        });\n    } else {\n        sortSet.sort((a,b) => {\n            return a[1] > b[1] ? -1 : b[1] > a[1] ? 1 : 0;\n        });\n    }\n}\n\nfunction sort2(sortSet,rows,sortCriteria){\n    const len = rows.length;\n    const [colIdx1] = sortCriteria[0];\n    const [colIdx2] = sortCriteria[1];\n    for (let i=0;i<len;i++){\n        sortSet[i][0] = i;\n        sortSet[i][1] = rows[i][colIdx1];\n        sortSet[i][2] = rows[i][colIdx2];\n    }\n    sortSet.sort((a,b) => {\n        return a[1] > b[1] ? 1 : b[1] > a[1] ? -1\n            : a[2] > b[2] ? 1 : b[2] > a[2] ? -1 : 0;\n    });\n}\n\nfunction sort3(/*sortSet,rows,sortCriteria*/){\n\n}\nfunction sortAll(/*sortSet,rows,sortCriteria*/){\n\n}\n\nexport function binarySearch(items, item, comparator) {\n    let l = 0;\n    let h = items.length - 1;\n    let m;\n    let comparison;\n\n    while (l <= h) {\n        m = (l + h) >>> 1; /* equivalent to Math.floor((l + h) / 2) but faster */\n        comparison = comparator(items[m], item);\n        if (comparison < 0) {\n            l = m + 1;\n        } else if (comparison > 0) {\n            h = m - 1;\n        } else {\n            return m;\n        }\n    }\n    return ~l;\n}\n\nexport function binaryInsert(rows, row, comparator) {\n    var i = binarySearch(rows, row, comparator);\n    /* if the binarySearch return value was zero or positive, a matching object was found */\n    /* if the return value was negative, the bitwise complement of the return value is the correct index for this object */\n    if (i < 0){\n        i = ~i;\n    }\n    rows.splice(i, 0, row);\n    return i;\n}\n\nfunction processTail(tail, row, tailGateKeeper, n, compare){\n    const diff = tailGateKeeper === null\n        ? -1\n        : compare(row, tailGateKeeper);\n\n    if (diff > 0 || tail.length < n){\n        binaryInsert(tail, row, compare);\n        if (tail.length > n) {\n            tail.shift();\n        }\n        tailGateKeeper = tail[0];\n    }\n    return tailGateKeeper;\n}\n\n// this is always called with a single col sort\nexport function sortedLowestAndHighest(rows, sortCriteria, offset, n=1000){\n    const s1 = new Date().getTime();\n    const compare = sortBy(sortCriteria);\n    const head = rows.slice(0,n).sort(compare);\n    const tail = [];\n    const len = rows.length;\n\n    let headGateKeeper = head[n-1];\n    let tailGateKeeper = null\n\n    for (let i=n;i<len;i++){\n        if (compare(rows[i], headGateKeeper) < 0){\n            binaryInsert(head, rows[i], compare);\n            // We need to remove largest item from head, does it belong in tail ?\n            tailGateKeeper = processTail(tail, head.pop(), tailGateKeeper, n, compare)\n            headGateKeeper = head[n-1];\n        } else {\n            tailGateKeeper = processTail(tail, rows[i], tailGateKeeper, n, compare)\n        }\n    }\n\n    for (let i=0;i<head.length;i++){\n        const row = head[i].slice();\n        row[0] = i + offset;\n        head[i] = row;\n    }\n\n    for (let i=0,idx=len-n;i<tail.length;i++,idx++){\n        const row = tail[i].slice();\n        row[0] = idx + offset;\n        tail[i] = row;\n    }\n\n    const s2 = new Date().getTime();\n    console.log(`lowest ${n} took ${s2-s1} ms , producing ${head.length} lowest `);\n\n    return [head, tail];\n}\n\nexport function sortReversed(cols1, cols2, colCount=cols1.length){\n    if (cols1 && cols2 && cols1.length > 0 && cols2.length === colCount){\n        for (let i=0;i<cols1.length; i++){\n            let [col1, direction1=ASC] = cols1[i];\n            let [col2, direction2=ASC] = cols2[i];\n            if (col1 !== col2 || direction1 === direction2){\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nexport function GROUP_ROW_TEST(group, row, [colIdx, direction]) {\n    if (group === row) {\n        return 0;\n    } else {\n        let a1 = direction === DSC ? row[colIdx] : group[colIdx];\n        let b1 = direction === DSC ? group[colIdx] : row[colIdx];\n        if (b1 === null || a1 > b1) {\n            return 1;\n        } else if (a1 == null || a1 < b1) {\n            return -1;\n        }\n    }\n}\n\nfunction ROW_SORT_TEST(a, b, [colIdx, direction]) {\n    if (a === b) {\n        return 0;\n    } else {\n        let a1 = direction === DSC ? b[colIdx] : a[colIdx];\n        let b1 = direction === DSC ? a[colIdx] : b[colIdx];\n        if (b1 === null || a1 > b1) {\n            return 1;\n        } else if (a1 == null || a1 < b1) {\n            return -1;\n        }\n    }\n}\n\n// sort null as low. not high\nexport function sortBy(cols, test=ROW_SORT_TEST) {\n    return function (a, b) {\n        for (let i = 0, result = 0, len=cols.length; i < len; i++) {\n            if (result = test(a, b, cols[i])) {\n                return result;\n            }\n        }\n        return 0;\n    };\n}\n\n// sorter is the sort comparator used to sort rows, we want to know\n// where row would be positioned in this sorted array. Return the\n// last valid position.\nexport function sortPosition(rows, sorter, row, positionWithinRange = 'last-available') {\n\n    function selectFromRange(pos) {\n\n        const len = rows.length;\n        const matches = p => sorter(rows[p], row) === 0;\n\n        //TODO this will depend on the sort direction\n        if (positionWithinRange === 'last-available') {\n            while (pos < len && matches(pos)) {\n                pos += 1;\n            }\n        } else if (positionWithinRange === 'first-available') {\n            while (pos > 0 && matches(pos - 1)) {\n                pos -= 1;\n            }\n        }\n\n        return pos;\n\n    }\n\n    function find(lo, hi) {\n\n        let mid = lo + Math.floor((hi - lo) / 2);\n        let pos = sorter(rows[mid], row);\n\n        if (lo === mid) {\n            return selectFromRange(pos >= 0 ? lo : hi);\n        }\n        if (pos >= 0) {\n            hi = mid;\n        } else {\n            lo = mid;\n        }\n        return find(lo, hi);\n    }\n\n    if (rows.length === 0){\n        return 0;\n    } else {\n        return find(0, rows.length);\n    }\n\n}\n","import { sortBy, sortPosition, GROUP_ROW_TEST } from './sort';\nimport { indexOfCol, metadataKeys } from '@heswell/utils';\n\nconst DEFAULT_OPTIONS = {\n    startIdx: 0,\n    rootIdx: null,\n    baseGroupby: []\n};\n\n/** @type {import('./group-utils').lowestIdxPointerFunc} */\nexport function lowestIdxPointer(groups, IDX, DEPTH, start, depth){\n    let result = Number.MAX_SAFE_INTEGER;\n    for (let i=start; i<groups.length; i++){\n        const group = groups[i];\n        const absDepth = Math.abs(group[DEPTH]);\n\n        if (absDepth > depth){\n            break;\n        } else if (absDepth === depth) {\n            const idx = group[IDX];\n            if (typeof idx === 'number' && idx < result){\n                result = idx;\n            }\n        }\n    }\n\n    return result === Number.MAX_SAFE_INTEGER ? undefined : result;\n\n}\n\n/** @type {import('./group-utils').getCountFunc} */\nexport function getCount(groupRow, PRIMARY_COUNT, FALLBACK_COUNT){\n    return typeof groupRow[PRIMARY_COUNT] === 'number'\n        ? groupRow[PRIMARY_COUNT]\n        : groupRow[FALLBACK_COUNT];\n}\n\nexport class SimpleTracker {\n    constructor(levels){\n        this.levels = Array(levels).fill(0).reduce((acc,el,i) => {\n            acc[i+1] = {key: null, pos: null, pPos: null};\n            return acc;\n        },{});\n    }\n    set(depth,pos,groupKey){\n        if (this.levels){\n            const level = this.levels[Math.abs(depth)];\n            if (level && level.key !== groupKey){\n                if (level.key !== null){\n                    level.pPos = level.pos;\n                }\n                level.key = groupKey;\n                level.pos = pos;\n            }\n        }\n    }\n    \n    hasParentPos(level){\n        return this.levels[level+1] && this.levels[level+1].pos !== null\n    }\n    \n    parentPos(level){\n        return this.levels[level+1].pos\n    }\n    \n    hasPreviousPos(level){\n        return this.levels[level] && this.levels[level].pPos !== null\n    }\n    \n    previousPos(level){\n        return this.levels[level].pPos;\n    }\n}\n\nexport class GroupIdxTracker {\n    constructor(levels){\n        this.idxAdjustment = 0;\n        this.maxLevel = levels+1;\n        this.levels = levels > 0\n            ? Array(levels).fill(0).reduce((acc,el,i) => {\n                acc[i+2] = {key: null, current: 0, previous: 0};\n                return acc;\n            },{})\n            : null;\n    }\n\n    increment(count){\n        this.idxAdjustment += count;\n        if (this.levels){\n            for (let i=2; i<this.maxLevel+1;i++){\n                this.levels[i].current += count;\n            }\n        }\n    }\n\n    previous(level){\n        return (this.levels && this.levels[level] && this.levels[level].previous) || 0\n    }\n\n    hasPrevious(level){\n        return this.previous(level) > 0;\n    }\n\n    get(idx){\n        return this.levels === null ? null: this.levels[idx]\n    }\n\n    set(depth,groupKey){\n        if (this.levels){\n            const level = this.levels[depth];\n            if (level && level.key !== groupKey){\n                if (level.key !== null){\n                    level.previous += level.current;\n                    level.current = 0;\n                }\n                level.key = groupKey;\n            }\n        }\n    }\n}\n\nconst itemIsNumeric = item => !isNaN(parseInt(item,10));\nconst numerically = (a,b) => parseInt(a)-parseInt(b);\n\nfunction sortKeys(o){\n    const keys = Object.keys(o);\n    if (keys.every(itemIsNumeric)){\n        return keys.sort(numerically)\n    } else {\n        return keys.sort()\n    }\n}\n\nexport function fillNavSetsFromGroups(groups, sortSet, sortIdx=0, filterSet=null, filterIdx, filterLen){\n    const keys = sortKeys(groups);\n    const filtered = filterSet !== null;\n    const filterIndices = filtered ? filterSet.slice(filterIdx,filterLen) : null;\n    for (let i = 0 ; i<keys.length;i++){\n        const groupedRows = groups[keys[i]]\n        if (Array.isArray(groupedRows)){\n            for (let j=0,len=groupedRows.length;j<len;j++){\n                const rowIdx = groupedRows[j];\n                sortSet[sortIdx] = rowIdx;\n                sortIdx += 1\n                // this could be prohibitively slow (the includes test) ...\n                if (filtered && filterIndices.includes(rowIdx)){\n                    filterSet[filterIdx] = rowIdx;\n                    filterIdx += 1;\n                }\n            }\n        } else {\n            sortIdx = fillNavSetsFromGroups(groupedRows, sortSet, sortIdx);\n        }\n    }\n    return sortIdx;\n}\n\n// WHY is param order different from groupLeafRows\n/** @type {import('./group-utils').groupRowsFunc} */\nexport function groupRows(rows, sortSet, columns, columnMap, groupby, options = DEFAULT_OPTIONS) {\n    const { startIdx = 0, length=rows.length, rootIdx = null, baseGroupby = [], groups=[], rowParents=null,\n        filterLength, filterSet, filterFn: filter } = options;\n    let {groupIdx=-1, filterIdx} = options;\n    const aggregations = findAggregatedColumns(columns, columnMap, groupby);\n    const groupedLeafRows = groupLeafRows(sortSet, rows, groupby, startIdx, length)\n    fillNavSetsFromGroups(groupedLeafRows, sortSet, startIdx, filterSet, filterIdx, filterLength);\n\n    const levels = groupby.length;\n    const currentGroups = Array(levels).fill(null);\n    const { IDX, DEPTH, FILTER_COUNT, NEXT_FILTER_IDX, count: metadataOffset } = metadataKeys;\n    let parentIdx = rootIdx;\n    let leafCount = 0;\n    for (let i = startIdx, len=startIdx+length; i < len; i++){\n        const rowIdx = sortSet[i];\n        const row = rows[rowIdx];\n\n        for (let level = 0; level < levels; level++) {\n            const [columnIdx] = groupby[level];\n            const currentGroup = currentGroups[level];\n            const groupValue = row[columnIdx];\n            // as soon as we identify a group change, each group at that level and below\n            // is then aggregated and new group(s) initiated. \n            // TODO how do we map from table idx (with 2 x metadata)\n            if (currentGroup === null || currentGroup[metadataOffset + columnIdx - 2/* !!!!!!! */] !== groupValue) {\n                if (currentGroup !== null) {\n                    // as soon as we know we're regrouping, aggregate the open groups, in reverse order\n                    for (let ii = levels - 1; ii >= level; ii--) {\n                        const group = currentGroups[ii];\n                        aggregate(group, groups, sortSet, rows, aggregations, leafCount, filter);\n                        if (filterSet && Math.abs(group[DEPTH]) === 1 && group[FILTER_COUNT] > 0){\n                            group[NEXT_FILTER_IDX] = filterIdx;\n                            filterIdx += group[FILTER_COUNT];\n                        }\n                    }\n\n                    leafCount = 0;\n                }\n                for (let ii = level; ii < levels; ii++) {\n                    groupIdx += 1;\n                    parentIdx = ii === 0 ? rootIdx : currentGroups[ii - 1][IDX];\n                    const depth = levels - ii;\n                    // for first-level groups, row pointer is a pointer into the sortSet\n                    const childIdx = depth === 1\n                        ? i\n                        : groupIdx+1;\n\n                    const groupRow = currentGroups[ii] = GroupRow(row, depth, groupIdx, childIdx, parentIdx, groupby, columns, columnMap, baseGroupby);\n                    groups.push(groupRow);\n                }\n                break; // do not continue looping once we identify the change point\n            }\n        }\n        rowParents && (rowParents[rowIdx] = groupIdx);\n        leafCount += 1;\n    }\n\n    for (let i = levels - 1; i >= 0; i--) {\n        if (currentGroups[i] !== null){\n            const group = currentGroups[i];\n            aggregate(group, groups, sortSet, rows, aggregations, leafCount, filter);\n            if (filterSet && Math.abs(group[DEPTH]) === 1 && group[FILTER_COUNT] > 0){\n                group[NEXT_FILTER_IDX] = filterIdx;\n            }\n        }\n    }\n    return groups;\n\n}\n\n// Checks very specifically for new cols added at end \n/** @type {import('./group-utils').groupbyExtendsExistingGroupby} */\nexport function groupbyExtendsExistingGroupby(groupBy, existingGroupBy) {\n    return (groupBy.length > existingGroupBy.length &&\n        existingGroupBy.every((g, i) => g[0] === groupBy[i][0]));\n}\n\n// doesn't care from which position col is removed, as long as it is not the first\n/** @type {import('./group-utils').groupbyReducesExistingGroupby} */\nexport function groupbyReducesExistingGroupby(groupby, existingGroupby) {\n    return (existingGroupby.length > groupby.length &&\n        groupby[0][0] === existingGroupby[0][0] &&\n        groupby.every(([key]) => existingGroupby.find(([key2]) => key2 === key)));\n}\n\n/** @type {import('./group-utils').groupbySortReversed} */\nexport function groupbySortReversed(groupBy, existingGroupBy) {\n    const [col] = findSortedCol(groupBy, existingGroupBy)\n    return col !== null;\n}\n\n/** @type {import('./group-utils').findDoomedColumnDepths} */\nexport function findDoomedColumnDepths(groupby, existingGroupby) {\n    const count = existingGroupby.length;\n    return existingGroupby.reduce(\n        (results, [colIdx], idx) => {\n            if (!groupby.some(group => group[0] === colIdx)) {\n                results.push(count - idx);\n            }\n            return results;\n        }, []);\n}\n\n/** @type {import('./group-utils').groupbyExtendsExistingGroupby} */\nexport function findSortedCol(groupby, existingGroupby) {\n    let results = [null];\n    let len1 = groupby && groupby.length;\n    let len2 = existingGroupby && existingGroupby.length;\n    if (len1 && len2 && len1 === len2) {\n\n        for (let i = 0; i < len1; i++) {\n            if (groupby[i][0] !== existingGroupby[i][0]) {\n                return results;\n            } else if (groupby[i][1] !== existingGroupby[i][1]) {\n                results[0] = i;\n                results[1] = len1 - i;\n            }\n        }\n    }\n    return results;\n}\n\nfunction byKey([key1], [key2]) {\n    return key1 > key2 ? 1 : key2 > key1 ? -1 : 0;\n}\n\nconst EMPTY = {};\n/** @type {import('./group-utils').getGroupStateChanges} */\nexport function getGroupStateChanges(groupState, existingGroupState = null, baseKey = '', groupIdx = 0) {\n    const results = [];\n    const entries = Object.entries(groupState);\n\n    entries.forEach(([key, value]) => {\n        if (value && (existingGroupState === null || !existingGroupState[key])) {\n            results.push([baseKey + key, groupIdx, true]);\n            if (value !== null && typeof value === 'object' && Object.keys(value).length > 0) {\n                const diff = getGroupStateChanges(value, EMPTY, baseKey + key + '/', groupIdx + 1);\n                if (diff.length) {\n                    results.push(...diff)\n                }\n            }\n        } else if (value) {\n            const diff = getGroupStateChanges(value, existingGroupState[key], baseKey + key + '/', groupIdx + 1);\n            if (diff.length) {\n                results.push(...diff)\n            }\n        }\n    })\n\n    if (existingGroupState !== null && typeof existingGroupState === 'object') {\n        Object.entries(existingGroupState).forEach(([key, value]) => {\n            if (value && !groupState[key]) {\n                results.push([baseKey + key, groupIdx, false]);\n            }\n        });\n    }\n\n    return results.sort(byKey);\n}\n\nexport function getDirection(depth, groupby) {\n    const idx = groupby.length - depth;\n    const [, direction] = groupby[idx];\n    return direction;\n}\n\n/** @type {import('./group-utils').expanded} */\nexport function expanded(group, groupby, groupState) {\n    const groupIdx = groupby.length - Math.abs(group[1]);\n    let groupVal;\n    let stateEntry = groupState;\n    for (let i = 0; i <= groupIdx; i++) {\n        const [colIdx] = groupby[i];\n        groupVal = group[colIdx];\n        if (i === groupIdx) {\n            return stateEntry[groupVal];\n        } else {\n            stateEntry = stateEntry[groupVal];\n            if (!stateEntry) {\n                return false;\n            }\n        }\n    }\n    return false;\n}\n\n/** @type {import('./group-utils').allGroupsExpanded} */\nexport function allGroupsExpanded(groups, group ){\n    const {DEPTH, PARENT_IDX} = metadataKeys;\n    do {\n        if (group[DEPTH] < 0){\n            return false;\n        }\n        group = groups[group[PARENT_IDX]];\n\n    } while (group)\n    \n    return true;\n}\n\n/** @type {import('./group-utils').adjustGroupIndices} */\nexport function adjustGroupIndices(groups, grpIdx, adjustment=1){\n    const {IDX, DEPTH, IDX_POINTER, PARENT_IDX} = metadataKeys;\n    for (let i=0;i<groups.length;i++){\n        if (groups[i][IDX] >= grpIdx){\n            groups[i][IDX] += adjustment;\n            if (Math.abs(groups[i][DEPTH]) > 1){\n                groups[i][IDX_POINTER] += adjustment;\n            }\n            let parentIdx = groups[i][PARENT_IDX];\n            if (parentIdx !== null && parentIdx >= grpIdx){\n                groups[i][PARENT_IDX] += adjustment;\n            }\n        }\n    }\n}\n\n/** @type {import('./group-utils').adjustLeafIdxPointers} */\nexport function adjustLeafIdxPointers(groups, insertionPoint, adjustment=1){\n    const {DEPTH, IDX_POINTER} = metadataKeys;\n    for (let i=0;i<groups.length;i++){\n        if (Math.abs(groups[i][DEPTH]) === 1 && groups[i][IDX_POINTER] >= insertionPoint){\n            groups[i][IDX_POINTER] += adjustment;\n        }\n    }\n}\n\n/** \n * Find the groups that will be affectes by an inserted row.\n * \n * @type {import('./group-utils').findGroupPositions} */\nexport function findGroupPositions(groups, groupby, dataRow) {\n\n    const positions = [];\n\n    out: for (let i = 0; i < groupby.length; i++) {\n        const sorter = sortBy(groupby.slice(0, i + 1), GROUP_ROW_TEST);\n        const position = sortPosition(groups, sorter, dataRow, 'first-available');\n        const group = groups[position];\n        // if all groups are missing and insert position is end of list ...\n        if (group === undefined) {\n            break;\n        }\n        // position is confirmed if all groupCol values in this comparison match values of row \n        // and other groupCol values  are null\n        for (let j = 0; j < groupby.length; j++) {\n            const colIdx = groupby[j][0];\n            const colValue = group[colIdx];\n            if (j > i) {\n                if (colValue !== null) {\n                    break out;\n                }\n            } else if (colValue !== dataRow[colIdx]) {\n                break out;\n            }\n\n        }\n        positions.push(position);\n    }\n\n    return positions;\n\n}\n\n/** @type {import('./group-utils').expandRow} */\nexport const expandRow = (groupCols, row, meta) => {\n    const r = row.slice();\n    r[meta.IDX] = 0;\n    r[meta.DEPTH] = 0; \n    r[meta.COUNT] = 0;\n    r[meta.KEY] = buildGroupKey(groupCols, row);\n    r[meta.SELECTED] = 0;\n    return r;\n}\n\nfunction buildGroupKey(groupby, row){\n    const extractKey = ([idx]) => row[idx];\n    return groupby.map(extractKey).join('/');\n}\n\n// Do we have to take columnMap out again ?\nexport function GroupRow(row, depth, idx, childIdx, parentIdx, groupby, columns, columnMap, baseGroupby = []) {\n    const { IDX, RENDER_IDX, DEPTH, COUNT, KEY, SELECTED, PARENT_IDX, IDX_POINTER, count: metadataOffset } = metadataKeys;\n    // The group is a set of metadata values plus data values\n    const group = Array(metadataOffset + columns.length);\n    const groupIdx = groupby.length - depth;\n    let colIdx;\n\n    for (let i = 0; i < columns.length; i++) {\n        const column = columns[i];\n        const key = columnMap[column.name];\n        // careful here, key maps to the table row (includes 2 metadata slots), groupBy has also been translated to table keys\n        // the group represents a full projection, metadata + columns\n        const groupKey = metadataOffset + i;\n        if (column.aggregate) { // implies we can't group on aggregate columns, does the UI know that ?\n            group[groupKey] = 0;\n        } else if ((colIdx = indexOfCol(key, groupby)) !== -1 && colIdx <= groupIdx) {\n            group[groupKey] = row[key];\n        } else {\n            group[groupKey] = null;\n        }\n    }\n    for (let i = 0; i < baseGroupby.length; i++) {\n        // baseGroupBy offsets are tableRow offsets, with 2 slots of metadata\n        const [colIdx] = baseGroupby[i];\n        // TODO need to convert colIdx to columns ref\n        group[metadataOffset + colIdx - 2] = row[colIdx];\n    }\n\n    const extractKey = ([idx]) => row[idx];\n    const buildKey = groupby => groupby.map(extractKey).join('/');\n    //TODO build the composite key for the grouprow\n    const baseKey = baseGroupby.length > 0\n        ? buildKey(baseGroupby) + '/'\n        : '';\n    const groupKey = buildKey(groupby.slice(0, groupIdx + 1));\n\n    group[IDX] = idx;\n    group[RENDER_IDX] = 0;\n    group[DEPTH] = -depth;\n    group[COUNT] = 0;\n    group[KEY] = baseKey + groupKey;\n    group[SELECTED] = 0;\n    group[PARENT_IDX] = parentIdx;\n    group[IDX_POINTER] = childIdx;\n\n    return group;\n\n}\n\nexport function groupLeafRows(sortSet, leafRows, groupby, startIdx=0, length=sortSet.length) {\n    const groups = {};\n    const levels = groupby.length;\n    const lastLevel = levels - 1;\n    for (let i=startIdx, len=startIdx+length; i < len; i++) {\n        const idx = sortSet[i]\n        const leafRow = leafRows[idx];\n        let target = groups;\n        let targetKey\n        let key;\n        for (let level = 0; level < levels; level++) {\n            const [colIdx] = groupby[level];\n            key = leafRow[colIdx];\n            targetKey = target[key]\n            if (targetKey && level === lastLevel) {\n                targetKey.push(idx);\n            } else if (targetKey) {\n                target = targetKey;\n            } else if (!targetKey && level < lastLevel) {\n                target = (target[key] = {});\n            } else if (!targetKey) {\n                target[key] = [idx];\n            }\n        }\n    }\n    return groups;\n}\n\n/** @type {import('./group-utils').splitGroupsAroundDoomedGroup} */\nexport function splitGroupsAroundDoomedGroup(groupby, doomed) {\n    const lastGroupIsDoomed = doomed === 1;\n    const doomedIdx = groupby.length - doomed;\n    const preDoomedGroupby = [];\n    const postDoomedGroupby = [];\n\n    groupby.forEach((col, i) => {\n        if (i < doomedIdx) {\n            preDoomedGroupby.push(col)\n        } else if (i > doomedIdx) {\n            postDoomedGroupby.push(col);\n        }\n    });\n\n    return [lastGroupIsDoomed, preDoomedGroupby, postDoomedGroupby];\n}\n\n/** @type {import('./group-utils').decrementDepth} */\nexport function decrementDepth(depth) {\n    return (Math.abs(depth) - 1) * (depth < 0 ? -1 : 1);\n}\n\n/** @type {import('./group-utils').incrementDepth} */\nexport function incrementDepth(depth) {\n    return (Math.abs(depth) + 1) * (depth < 0 ? -1 : 1);\n}\n\n// hardcode the index ref for now\n// When we build the group index, all groups are collapsed\nexport function indexGroupedRows(groupedRows) {\n\n    // TODO\n    const Fields = {\n        Depth: 1,\n        Key: 4\n    };\n\n    const groupedIndex = {};\n    const levels = [];\n    const COLLAPSED = -1;\n\n    for (let idx = 0; idx < groupedRows.length; idx++) {\n\n        let row = groupedRows[idx];\n        let rowDepth = row[Fields.Depth];\n\n        if (rowDepth === 0) {\n            let index = [idx];\n            levels.forEach(level => {\n                index.push(level[1], COLLAPSED);\n            });\n            groupedIndex[row[Fields.Key]] = index;\n        } else {\n            while (levels.length && Math.abs(levels[levels.length - 1][0]) <= Math.abs(rowDepth)) {\n                levels.pop();\n            }\n            levels.push([rowDepth, idx]);\n        }\n    }\n\n    return groupedIndex;\n}\n\n/** @type {import('./group-utils').findAggregatedColumns} */\nexport function findAggregatedColumns(columns, columnMap, groupby) {\n    return columns.reduce((aggregations, column) => {\n        if (column.aggregate && indexOfCol(column.name, groupby) === -1) {\n            const key = columnMap[column.name];\n            aggregations.push([key, column.aggregate]);\n        }\n        return aggregations;\n    }, []);\n}\n\n/** \n * Called when we clear a filter\n * \n * @type {import('./group-utils').aggregateGroup} */\nexport function aggregateGroup(groups, grpIdx, sortSet, rows, columns, aggregations) {\n\n    const {DEPTH, COUNT} = metadataKeys;\n    const groupRow = groups[grpIdx];\n    let depth = groupRow[DEPTH];\n    let absDepth = Math.abs(depth);\n    let count = 0;\n    let idx = grpIdx;\n\n    // find the last nested group and work back - first build aggregates for level 1 groups,\n    // then use those to aggregate to level 2 etc.\n    while (idx < groups.length - 1 && Math.abs(groups[idx+1][DEPTH]) < absDepth){\n        idx += 1;\n        count += 1;\n    }\n\n    for (let i=grpIdx+count; i >= grpIdx; i--){\n        for (let aggIdx = 0; aggIdx < aggregations.length; aggIdx++) {\n            const [colIdx] = aggregations[aggIdx];\n            const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n            groups[i][dataIdx] = 0;\n        }\n        aggregate(groups[i], groups, sortSet, rows, aggregations, groups[i][COUNT])\n    }\n\n}\n\nfunction aggregate(groupRow, groupRows, sortSet, rows, aggregations, leafCount, filter=null) {\n    const {DEPTH, COUNT, FILTER_COUNT, IDX_POINTER, count: metadataOffset} = metadataKeys;\n    let absDepth = Math.abs(groupRow[DEPTH]);\n    let count = 0;\n    let filteredCount = filter === null ? undefined : 0;\n\n    if (absDepth === 1) {\n        // The first group accumulates aggregates from the raw data...\n        let start = groupRow[IDX_POINTER];\n        let end = start + leafCount;\n        count = leafCount;\n        for (let i = start; i < end; i++) {\n            const row = rows[sortSet[i]];\n            const included = filter === null || filter(row);\n            if (filter && included){\n                filteredCount += 1;\n            }\n            if (filter === null || included){\n                for (let aggIdx = 0; aggIdx < aggregations.length; aggIdx++) {\n                    const [colIdx] = aggregations[aggIdx];\n                    groupRow[metadataOffset + colIdx - 2/* !!!!!!! */] += row[colIdx];\n                }\n            }\n        }\n    } else {\n        // higher-level groups aggregate from child-groups ...\n        // we cannot blindly use the grpIndex of the groupRow, as we may be dealing with a smaller subset\n        // of groupRows, e,g, when inserting a new row and creating the missing groups\n        const startIdx = groupRows.indexOf(groupRow) + 1;\n        for (let i=startIdx;i<groupRows.length;i++){\n            const nestedGroupRow = groupRows[i];\n            const nestedRowDepth = nestedGroupRow[DEPTH];\n            const nestedRowCount = nestedGroupRow[COUNT];\n            const absNestedRowDepth = Math.abs(nestedRowDepth);\n            if (absNestedRowDepth >= absDepth){\n                break;\n            } else if (absNestedRowDepth === absDepth - 1) {\n                for (let aggIdx = 0; aggIdx < aggregations.length; aggIdx++) {\n                    const [colIdx, method] = aggregations[aggIdx];\n                    if (method === 'avg') {\n                        groupRow[metadataOffset + colIdx - 2] += nestedGroupRow[metadataOffset + colIdx - 2] * nestedRowCount;\n                    } else {\n                        groupRow[metadataOffset + colIdx - 2] += nestedGroupRow[metadataOffset + colIdx - 2];\n                    }\n                }\n                count += nestedRowCount;\n            }\n        }\n    }\n\n    for (let aggIdx = 0; aggIdx < aggregations.length; aggIdx++) {\n        const [colIdx, method] = aggregations[aggIdx];\n        if (method === 'avg') {\n            groupRow[metadataOffset + colIdx - 2] = groupRow[metadataOffset + colIdx - 2] / count;\n        }\n    }\n\n    groupRow[COUNT] = count;\n    groupRow[FILTER_COUNT] = filteredCount;\n\n}\n\nexport function leafRow([idx,key, ...data]){\n    // TODO find fastest way to do this\n    const row = Array(metadataKeys.count).fill(0).concat(data)\n    row[metadataKeys.IDX] = idx;\n    row[metadataKeys.KEY] = key;\n    return row;\n}\n","export const NULL_RANGE = {lo: 0,hi: 0};\n\n// If the requested range overlaps the last sent range, we only need send the\n// newly exposed section of the range. The client will manage dropping off\n// the expired section.\n//\n// |----------------------------------| _range\n//  ++++++|----------------------------------| prevRange\n//  \n//\n//\n//  |------------------------------------| _range\n//  |----------------------------------|+  prevRange\n\n/** @type {import('./range-utils').getDeltaRange} */\nexport function getDeltaRange(oldRange, newRange){\n    //TODO do we still need these calls to getFullRange ?\n    const {lo: oldLo, hi: oldHi} = oldRange /*getFullRange(oldRange)*/;\n    const {lo: newLo, hi: newHi} = newRange /*getFullRange(newRange)*/;\n\n    if (newLo >= oldLo && newHi <= oldHi){\n        // reduced range, no delta\n        return {lo: newHi, hi: newHi};\n\n    } else if (newLo >= oldHi || newHi < oldLo){\n        return {lo: newLo, hi: newHi};\n    } else if (newLo === oldLo && newHi === oldHi){\n        return {lo: oldHi,hi: oldHi};\n    } else {\n        return {\n            lo: newLo < oldLo ? newLo: oldHi,\n            hi: newHi > oldHi ? newHi: oldLo\n        };\n    }\n}\n\n/**\n * \n * @type {import('./range-utils').resetRange}\n */\nexport function resetRange({lo,hi,bufferSize=0}){\n    return {\n        lo: 0,\n        hi: hi-lo,\n        bufferSize,\n        reset: true\n    };\n}\n\nconst SAME = 0;\nconst FWD = 2;\nconst BWD = 4;\nconst CONTIGUOUS = 8;\nconst OVERLAP = 16;\nconst REDUCE = 32;\nconst EXPAND = 64;\nconst NULL = 128;\n\nexport const RangeFlags = {\n    SAME,\n    FWD,\n    BWD,\n    CONTIGUOUS,\n    OVERLAP,\n    REDUCE,\n    EXPAND,\n    NULL\n}\n\nRangeFlags.GAP = ~(CONTIGUOUS | OVERLAP | REDUCE)\n\n/** @type {import('./range-utils').compareRanges} */\nexport function compareRanges(range1, range2){\n    if (range2.lo === 0 && range2.hi === 0){\n        return NULL;\n    } else if (range1.lo === range2.lo && range1.hi === range2.hi){\n        return SAME;\n    } else if (range2.hi > range1.hi){\n        if (range2.lo > range1.hi){\n            return FWD;\n        } else if (range2.lo === range1.hi){\n            return FWD + CONTIGUOUS;\n        } else if (range2.lo >= range1.lo){\n            return FWD + OVERLAP;\n        } else {\n            return EXPAND;\n        }\n    } else if (range2.lo < range1.lo){\n        if (range2.hi < range1.lo){\n            return BWD;\n        } else if (range2.hi === range1.lo){\n            return BWD + CONTIGUOUS;\n        } else if (range2.hi > range1.lo){\n            return BWD + OVERLAP;\n        } else {\n            return EXPAND;\n        }\n    } else if (range2.lo > range1.lo) {\n        return REDUCE + FWD;\n    } else {\n        return REDUCE + BWD\n    }\n}\n","/**\n * Keep all except for groupRowset in this file to avoid circular reference warnings\n */\nimport * as d3 from 'd3-array';\nimport Table from '../table';\nimport SelectionModel, {SelectionModelType} from '../selection-model';\nimport { sort, sortExtend, sortReversed, sortBy, sortPosition, sortableFilterSet } from '../sort';\nimport { groupbyExtendsExistingGroupby } from '../group-utils';\nimport { \n    addRowsToIndex,\n    arrayOfIndices,\n    BIN_FILTER_DATA_COLUMNS,\n    DataTypes,\n    extendsFilter,\n    extractFilterForColumn,\n    functor as filterPredicate,\n    getFullRange,\n    projectColumns,\n    projectUpdates,\n    mapSortCriteria,\n    metadataKeys,\n    overrideColName,\n    SET_FILTER_DATA_COLUMNS,\n    splitFilterOnColumn,\n} from '@heswell/utils';\nimport { getDeltaRange, NULL_RANGE } from '../range-utils';\n\nconst SINGLE_COLUMN = 1;\n\nconst NO_OPTIONS = {\n    filter: null\n}\n\nexport default class BaseRowSet {\n\n    constructor(table, offset = 0) {\n        this.table = table;\n        this.offset = offset;\n        this.baseOffset = offset;\n        this.range = NULL_RANGE;\n        this.currentFilter = null;\n        this.filterSet = null;\n        this.sortSet = undefined;\n        this.data = table.rows;\n        this.selected = {rows: [], focusedIdx: -1, lastTouchIdx: -1};\n        this.type = undefined;\n        this.index = undefined;\n        /**\n         * data IDX of selected rows \n         */\n        this.selectedRowsIDX = [];\n        this.selectionModel = this.createSelectionModel();\n\n    }\n\n    get size(){\n        console.error(\"size must be implemented by concrete Rowset\")\n        return 0;\n    }\n\n    slice(lo, hi){\n        throw new Error(\"slice must be implemented by concrete Rowset\")\n    }\n\n    createSelectionModel(){\n        return new SelectionModel();\n    }\n\n    // used by binned rowset\n    get filteredData() {\n        if (this.filterSet) {\n            return this.filterSet;\n        } else {\n            const { IDX } = metadataKeys;\n            return this.data.map(row => row[IDX])\n        }\n    }\n\n    get stats(){\n        // TODO cache the stats and invalidate them in the event of any op that might change them \n        const {totalRowCount, filteredRowCount, selected, selectedRowsIDX} = this;\n        const totalSelected = selectedRowsIDX.length;\n        const filteredSelected = selected.rows.length;\n\n        return {\n            totalRowCount,\n            totalSelected,\n            filteredRowCount,\n            filteredSelected\n        }\n    }\n\n    get totalRowCount(){\n        return this.data.length;\n    } \n\n    get filteredRowCount(){\n        return this.filterSet === null\n            ? this.data.length\n            : this.filterSet.length\n    }\n\n\n    get selectedRowCount(){\n        return this.selected.rows.length;\n    }\n\n    setRange(range=this.range, useDelta = true, includeStats=false) {\n\n        const { lo, hi } = useDelta ? getDeltaRange(this.range, range) : getFullRange(range);\n        const resultset = this.slice(lo, hi);\n        this.range = range;\n        const length = this.size;\n        return {\n            dataType: this.type,\n            rows: resultset,\n            range,\n            size: length,\n            offset: this.offset,\n            stats: includeStats ? this.stats : undefined\n        };\n    }\n\n    currentRange() {\n        const { lo, hi } = this.range;\n        const resultset = this.slice(lo, hi);\n        return {\n            dataType: this.type,\n            rows: resultset,\n            range: this.range,\n            size: this.size,\n            offset: this.offset,\n            stats: undefined\n        };\n    }\n\n    select(idx, rangeSelect, keepExistingSelection){\n\n        const { selectionModel, range: {lo, hi}, filterSet, sortSet, offset} = this;\n        const { SELECTED } = metadataKeys\n        const {selected, deselected, ...selectionState} = selectionModel.select(\n            this.selected,\n            idx,\n            rangeSelect,\n            keepExistingSelection\n        );\n        \n        this.selected = selectionState;\n\n        if (filterSet){\n            if (selected.length){\n                this.selectedRowsIDX.push(...selected.map(i => filterSet[i]))\n            }\n            if (deselected.length){\n                const deselectedRowIDX = deselected.map(i => filterSet[i]);\n                this.selectedRowsIDX = this.selectedRowsIDX.filter(rowIdx => !deselectedRowIDX.includes(rowIdx));\n            }\n        } else {\n            const idxToIDX = idx => sortSet[idx][0];\n            this.selectedRowsIDX = this.selected.rows.map(idxToIDX)\n        } \n\n        const updates = [];\n        for (let i=0;i<selected.length;i++){\n            const idx = selected[i];\n            if (idx >= lo && idx < hi){\n                updates.push([idx+offset,SELECTED, 1]);\n            }\n        }\n        for (let i=0;i<deselected.length;i++){\n            const idx = deselected[i];\n            if (idx >= lo && idx < hi){\n                updates.push([idx+offset,SELECTED, 0]);\n            }\n        }\n        \n        return updates;\n    }\n\n    selectAll(){\n        const {data, selected, selectedRowsIDX, range: {lo, hi}, filterSet, offset} = this;\n        const { SELECTED } = metadataKeys;\n        const previouslySelectedRows = [...this.selected.rows];\n        if (filterSet){\n            // selection of a filtered subset is added to existing selection \n            for (let i =0; i< filterSet.length; i++){\n                const rowIDX = filterSet[i];\n                if (!selectedRowsIDX.includes(rowIDX)){\n                    selected.rows.push(i); // does it matter if thes eend up out of sequence ?\n                    selectedRowsIDX.push(rowIDX);\n                }\n            }\n\n        } else {\n            // Step 1: brute force approach, actually create list of selected indices\n            // need to replace this with a structure that tracks ranges\n            this.selected = {rows: arrayOfIndices(data.length), focusedIdx: -1, lastTouchIdx: -1};\n            this.selectedRowsIDX = [...this.selected.rows];\n        }   \n\n        const updates = [];\n        const max = Math.min(hi, (filterSet || data).length)\n        for (let i=lo;i<max;i++){\n            if (this.selected.rows.includes(i) && !previouslySelectedRows.includes(i)){ \n                updates.push([i+offset,SELECTED, 1]);\n            }\n        }\n        \n        return updates;\n\n    }\n\n    selectNone(){\n\n        const {range: {lo, hi}, filterSet, offset} = this;\n        const {SELECTED} = metadataKeys;\n        const previouslySelectedRows = this.selectedRowsIDX;\n        if (filterSet){\n            this.selected = {rows: [], focusedIdx: -1, lastTouchIdx: -1};\n            this.selectedRowsIDX = this.selectedRowsIDX.filter(idx => !filterSet.includes(idx));\n        } else {\n            this.selected = {rows: [], focusedIdx: -1, lastTouchIdx: -1};\n            this.selectedRowsIDX = [];\n        }\n        const updates = [];\n        for (let i=lo;i<hi;i++){\n            const idx = filterSet ? filterSet[i] : i;\n            if (previouslySelectedRows.includes(idx)){\n                updates.push([i+offset,SELECTED, 0]);\n            }\n        }\n        return updates;\n    }\n\n    selectNavigationSet(useFilter) {\n        const { COUNT, IDX_POINTER, FILTER_COUNT, NEXT_FILTER_IDX } = metadataKeys;\n        return useFilter\n            ? [this.filterSet, NEXT_FILTER_IDX, FILTER_COUNT]\n            : [this.sortSet, IDX_POINTER, COUNT];\n    }\n\n    //TODO cnahge to return a rowSet, same as getDistinctValuesForColumn\n    getBinnedValuesForColumn(column) {\n        const key = this.table.columnMap[column.name];\n        const { data: rows, filteredData } = this;\n        const numbers = filteredData.map(rowIdx => rows[rowIdx][key]);\n        const data = d3.histogram().thresholds(20)(numbers).map((arr, i) => [i + 1, arr.length, arr.x0, arr.x1]);\n\n        const table = new Table({ data, primaryKey: 'bin', columns: BIN_FILTER_DATA_COLUMNS });\n        const filterRowset = new BinFilterRowSet(table, BIN_FILTER_DATA_COLUMNS, column.name);\n        return filterRowset;\n    }\n\n    getDistinctValuesForColumn(column) {\n        const { data: rows, currentFilter } = this;\n        const colIdx = this.table.columnMap[column.name]\n        const resultMap = {};\n        const data = [];\n        const dataRowCount = rows.length;\n        const [/*columnFilter*/, otherFilters] = splitFilterOnColumn(currentFilter, column)\n        // this filter for column that we remove will provide our selected values   \n        let dataRowAllFilters = 0;\n\n        if (otherFilters === null) {\n            let result;\n            for (let i = 0; i < dataRowCount; i++) {\n                const val = rows[i][colIdx];\n                if (result = resultMap[val]) {\n                    result[2] = ++result[1];\n                } else {\n                    result = [val, 1, 1]\n                    resultMap[val] = result;\n                    data.push(result)\n                }\n            }\n            dataRowAllFilters = dataRowCount;\n        } else {\n\n            const fn = filterPredicate(this.table.columnMap, otherFilters);\n            let result;\n\n            for (let i = 0; i < dataRowCount; i++) {\n                const row = rows[i];\n                const val = row[colIdx];\n                const isIncluded = fn(row) ? 1 : 0;\n                if (result = resultMap[val]) {\n                    result[1] += isIncluded;\n                    result[2]++;\n                } else {\n                    result = [val, isIncluded, 1]\n                    resultMap[val] = result;\n                    data.push(result)\n                }\n                dataRowAllFilters += isIncluded;\n            }\n        }\n\n        //TODO primary key should be indicated in columns\n        const table = new Table({ data, primaryKey: 'name', columns: SET_FILTER_DATA_COLUMNS });\n        return new SetFilterRowSet(table, SET_FILTER_DATA_COLUMNS, column.name, dataRowAllFilters, dataRowCount);\n\n    }\n}\n\n//TODO should range be baked into the concept of RowSet ?\nexport class RowSet extends BaseRowSet {\n\n    // TODO stream as above\n    static fromGroupRowSet({ table, columns, offset, currentFilter: filter }) {\n        return new RowSet(table, columns, offset, {\n            filter\n        });\n    }\n    //TODO consolidate API of rowSet, groupRowset\n    constructor(table, columns, offset = 0, { filter = null } = NO_OPTIONS) {\n        super(table, offset);\n        this.type = \"rowData\";\n        this.project = projectColumns(table.columnMap, columns);\n        this.sortCols = null;\n        this.sortReverse = false;\n        this.sortSet = this.buildSortSet();\n        this.filterSet = null;\n        this.sortRequired = false;\n        if (filter) {\n            this.currentFilter = filter;\n            this.filter(filter);\n        }\n    }\n\n    buildSortSet() {\n        const len = this.data.length;\n        const arr = Array(len);\n        for (let i = 0; i < len; i++) {\n            arr[i] = [i, null, null]; // so we're allowing max of 2 sort criteria ?\n        }\n        return arr;\n    }\n\n    slice(lo, hi) {\n        const {data, selectedRowsIDX, filterSet, offset, sortCols, sortSet, sortReverse} = this;\n        if (filterSet) {\n            const filterMapper = typeof filterSet[0] === 'number'\n                ? idx => data[idx]\n                : ([idx]) => data[idx];\n\n            const results = []\n            for (let i = lo, len = filterSet.length; i < len && i < hi; i++) {\n                const row = sortReverse\n                    ? filterMapper(filterSet[len - i - 1])\n                    : filterMapper(filterSet[i]);\n                results.push(row);\n            }\n            return results.map(this.project(lo, offset, selectedRowsIDX));\n\n        } else if (sortCols) {\n            const results = []\n            for (let i = lo, len = data.length; i < len && i < hi; i++) {\n                const idx = sortReverse\n                    ? sortSet[len - i - 1][0]\n                    : sortSet[i][0];\n                const row = data[idx];\n                results.push(row);\n            }\n            return results.map(this.project(lo, offset, selectedRowsIDX));\n        } else {\n            return this.data.slice(lo, hi).map(this.project(lo, offset, selectedRowsIDX));\n        }\n    }\n\n    // deprecated ?\n    get size() {\n        return this.filterSet === null\n            ? this.data.length\n            : this.filterSet.length\n    }\n\n    get first() {\n        return this.data[0];\n    }\n    get last() {\n        return this.data[this.data.length - 1];\n    }\n    get rawData() {\n        return this.data;\n    }\n\n    setSubscribedColumns(columns) {\n        console.log(`Rowset setSubscribedColumns ${columns.join(',')}`)\n    }\n\n    setStatus(status) {\n        this.status = status;\n    }\n\n    addRows(rows) {\n        // TODO where is this.index ever created ?\n        addRowsToIndex(rows, this.index, metadataKeys.IDX);\n        this.data = this.data.concat(rows);\n    }\n\n    sort(sortCols) {\n\n        const sortSet = this.currentFilter === null\n            ? this.sortSet\n            : this.filterSet = sortableFilterSet(this.filterSet);\n\n        this.sortRequired = this.currentFilter !== null;\n\n        if (sortReversed(this.sortCols, sortCols, SINGLE_COLUMN)) {\n            this.sortReverse = !this.sortReverse;\n        } else if (this.sortCols !== null && groupbyExtendsExistingGroupby(sortCols, this.sortCols)) {\n            this.sortReverse = false;\n            sortExtend(sortSet, this.data, sortCols, this.table.columnMap)\n        } else {\n            this.sortReverse = false;\n            sort(sortSet, this.data, sortCols, this.table.columnMap)\n        }\n\n        this.sortCols = sortCols;\n\n    }\n\n    clearFilter() {\n        this.currentFilter = null;\n        this.filterSet = null;\n        if (this.sortRequired) {\n            this.sort(this.sortCols);\n        }\n    }\n\n    filter(filter) {\n        const extendsCurrentFilter = extendsFilter(this.currentFilter, filter);\n        const fn = filter && filterPredicate(this.table.columnMap, filter);\n        const { data: rows } = this;\n        let [navSet] = this.selectNavigationSet(extendsCurrentFilter && this.filterSet)\n        const newFilterSet = [];\n\n        for (let i = 0; i < navSet.length; i++) {\n            const rowIdx = navSet === this.filterSet ? navSet[i] : navSet[i][0];\n            const row = rows[rowIdx];\n            if (fn(row)) {\n                newFilterSet.push(rowIdx)\n            }\n        }\n\n        // recompute selected.rows from selectedRowIDX\n        if (this.selectedRowsIDX.length){\n            const {selectedRowsIDX, selected} = this;\n            selected.rows.length = 0;\n            for (let i=0;i<newFilterSet.length;i++){\n                const rowIDX = newFilterSet[i];\n                if (selectedRowsIDX.includes(rowIDX)){\n                    selected.rows.push(i);\n                }\n            }\n        }\n\n        this.filterSet = newFilterSet;\n        this.currentFilter = filter;\n        if (!extendsCurrentFilter && this.sortRequired) {\n            // TODO this might be very expensive for large dataset\n            // WHEN DO WE DO THIS - IS THIS CORRECT !!!!!\n            this.sort(this.sortCols)\n        }\n        return newFilterSet.length;\n\n    }\n\n    update(idx, updates) {\n        if (this.currentFilter === null && this.sortCols === null) {\n            if (idx >= this.range.lo && idx < this.range.hi) {\n                return [idx + this.offset, ...projectUpdates(updates)];\n            }\n        } else if (this.currentFilter === null) {\n            const { sortSet } = this;\n            for (let i = this.range.lo; i < this.range.hi; i++) {\n                const [rowIdx] = sortSet[i];\n                if (rowIdx === idx) {\n                    return [i + this.offset, ...projectUpdates(updates)];\n                }\n            }\n        } else {\n            // sorted AND/OR filtered\n            const { filterSet } = this;\n            for (let i = this.range.lo; i < this.range.hi; i++) {\n                const rowIdx = Array.isArray(filterSet[i]) ? filterSet[i][0] : filterSet[i];\n                if (rowIdx === idx) {\n                    return [i + this.offset, ...projectUpdates(updates)];\n                }\n            }\n        }\n    }\n\n    insert(idx, row) {\n        // TODO multi colun sort sort DSC \n        if (this.sortCols === null && this.currentFilter === null) {\n            // simplest scenario, row will be at end of sortset ...\n            this.sortSet.push([idx, null, null]);\n            if (idx >= this.range.hi) {\n                // ... row is beyond viewport\n                return {\n                    size: this.size\n                }\n            } else {\n                // ... row is within viewport\n                return {\n                    size: this.size,\n                    replace: true\n                }\n            }\n        } else if (this.currentFilter === null) {\n            // sort only - currently only support single column sorting\n            const sortCols = mapSortCriteria(this.sortCols, this.table.columnMap);\n            const [[colIdx]] = sortCols;\n            const sortRow = [idx, row[colIdx]];\n            const sorter = sortBy([[1, 'asc']]); // the sortSet is always ascending\n            const sortPos = sortPosition(this.sortSet, sorter, sortRow, 'last-available');\n            this.sortSet.splice(sortPos, 0, sortRow);\n\n            // we need to know whether it is an ASC or DSC sort to determine whether row is in viewport\n            const viewportPos = this.sortReverse\n                ? this.size - sortPos\n                : sortPos;\n\n            if (viewportPos >= this.range.hi) {\n                return {\n                    size: this.size\n                }\n            } else if (viewportPos >= this.range.lo) {\n                return {\n                    size: this.size,\n                    replace: true\n                }\n            } else {\n                return {\n                    size: this.size,\n                    offset: this.offset - 1\n                }\n            }\n\n        } else if (this.sortCols === null) {\n            // filter only\n            const fn = filterPredicate(this.table.columnMap, this.currentFilter);\n            if (fn(row)) {\n                const navIdx = this.filterSet.length;\n                this.filterSet.push(idx);\n                if (navIdx >= this.range.hi) {\n                    // ... row is beyond viewport\n                    return {\n                        size: this.size\n                    }\n                } else if (navIdx >= this.range.lo) {\n                    // ... row is within viewport\n                    return {\n                        size: this.size,\n                        replace: true\n                    }\n                } else {\n                    return {\n                        size: this.size,\n                        offset: this.offset - 1\n                    }\n                }\n\n            } else {\n                return {}\n            }\n        } else {\n            // sort AND filter\n            const fn = filterPredicate(this.table.columnMap, this.currentFilter);\n            if (fn(row)) {\n                // TODO what about totalCOunt\n\n                const sortCols = mapSortCriteria(this.sortCols, this.table.columnMap);\n                const [[colIdx, direction]] = sortCols; // TODO multi-colun sort\n                const sortRow = [idx, row[colIdx]];\n                const sorter = sortBy([[1, direction]]); // TODO DSC\n                const navIdx = sortPosition(this.filterSet, sorter, sortRow, 'last-available');\n                this.filterSet.splice(navIdx, 0, sortRow);\n\n                if (navIdx >= this.range.hi) {\n                    // ... row is beyond viewport\n                    return {\n                        size: this.size\n                    }\n                } else if (navIdx >= this.range.lo) {\n                    // ... row is within viewport\n                    return {\n                        size: this.size,\n                        replace: true\n                    }\n                } else {\n                    return {\n                        size: this.size,\n                        offset: this.offset - 1\n                    }\n                }\n\n            } else {\n                return {}\n            }\n\n        }\n    }\n}\n\n// TODO need to retain and return any searchText\nexport class SetFilterRowSet extends RowSet {\n    constructor(table, columns, columnName, dataRowAllFilters, dataRowTotal) {\n        super(table, columns);       \n        this.type = DataTypes.FILTER_DATA; \n        this.columnName = columnName;\n        this._searchText = null;\n        this.dataRowFilter = null;\n        this.dataCounts = {\n            dataRowTotal,\n            dataRowAllFilters,\n            dataRowCurrentFilter : 0,\n            filterRowTotal : this.data.length,\n            filterRowSelected : this.data.length,\n            filterRowHidden : 0\n        };\n        this.sort([['name', 'asc']]);\n    }\n\n    createSelectionModel(){\n        return new SelectionModel(SelectionModelType.Checkbox);\n    }\n\n\n    clearRange(){\n        this.range = {lo:0, hi: 0};\n    }\n    \n    get values() {\n        const key = this.table.columnMap['name'];\n        return this.filterSet.map(idx => this.data[idx][key])\n    }\n\n    // will we ever need this on base rowset ?\n    getSelectedValue(idx){\n        const {data, sortSet, filterSet} = this;\n        if (filterSet){\n           const filterEntry= filterSet[idx];\n           const rowIDX = typeof filterEntry === 'number'\n             ? filterEntry\n             : filterEntry[0];\n           return data[rowIDX][0];  \n           \n        } else {\n            return sortSet[idx][1];\n        }\n    }\n\n    setSelectedFromFilter(dataRowFilter) {\n\n        const columnFilter = extractFilterForColumn(dataRowFilter, this.columnName);\n        const columnMap = this.table.columnMap;\n        const { data, filterSet, sortSet} = this;\n\n        this.dataRowFilter = dataRowFilter;\n        \n        if (columnFilter){\n\n            const fn = filterPredicate(columnMap, overrideColName(columnFilter, 'name'));\n            const selectedRows = [];\n            const selectedRowsIDX = [];\n\n            if (filterSet){\n                for (let i=0;i<filterSet.length;i++){\n                    const rowIDX = filterSet[i];\n                    if (fn(data[rowIDX])){\n                        selectedRows.push(i);\n                        selectedRowsIDX.push(rowIDX);\n                    }\n                }\n            } else {\n                for (let i=0;i<data.length;i++){\n                    const rowIDX = sortSet[i][0];\n                    if (fn(data[rowIDX])){\n                        selectedRows.push(i);\n                        selectedRowsIDX.push(rowIDX);\n                    }\n                }\n\n            }\n          \n            this.selected = {rows: selectedRows, focusedIdx: -1, lastTouchIdx: -1 };\n            this.selectedRowsIDX = selectedRowsIDX;\n\n        \n        } else {\n\n            this.selectAll();    \n\n        }\n\n        return this.currentRange();\n\n    }\n}\n\nexport class BinFilterRowSet extends RowSet {\n    constructor(table, columns, columnName) {\n        super(table, columns);\n        this.type = DataTypes.FILTER_BINS;\n        this.columnName = columnName;\n    }\n\n    setSelectedFromFilter(filter){\n        console.log(`need to apply filter to selected BinRowset`, filter)\n    }\n    // we don't currently have a concept of range here, but it will\n    // be used in the future\n    // Note: currently no projection here, we don't currently need metadata\n    setRange() {\n        const length = this.size;\n        return {\n            dataType: this.type,\n            rows: this.data,\n            range: null,\n            size: length,\n            offset: 0,\n            stats: undefined\n        };\n    }\n\n}\n","import { getFullRange, metadataKeys } from '@heswell/utils';\nimport { NULL_RANGE, compareRanges, RangeFlags, getDeltaRange } from './range-utils';\nimport {getCount, leafRow} from './group-utils';\n\nconst RANGE_POS_TUPLE_SIZE = 4;\nconst NO_RESULT = [null,null,null]\n\nexport const FORWARDS = 0;\nexport const BACKWARDS = 1;\n\nexport default function GroupIterator(groups, navSet, data, NAV_IDX, NAV_COUNT) {\n    let _idx = 0;\n    let _grpIdx = null;\n    let _rowIdx = null;\n    let _direction = FORWARDS;\n    let _range = NULL_RANGE;\n    let _range_position_lo = [0, null, null];\n    let _range_positions = [];\n    let _range_position_hi = [null, null, null];\n\n    return {\n        get direction(){ return _direction },\n        get rangePositions(){ return _range_positions }, // do we ever use these ?\n        setRange,\n        currentRange,\n        getRangeIndexOfGroup,\n        getRangeIndexOfRow,\n        setNavSet,\n        refresh: currentRange,\n        clear\n    };\n\n    function getRangeIndexOfGroup(grpIdx){\n        const list = _range_positions;\n        for (let i=0; i< list.length; i += RANGE_POS_TUPLE_SIZE){\n            if (list[i+1] === grpIdx) {\n                if (list[i+2] === null){\n                    return i/RANGE_POS_TUPLE_SIZE;\n                } else {\n                    // first row encountere should be the group, if it\n                    // isn't it means it is crolled out of viewport\n                    return -1;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function getRangeIndexOfRow(idx){\n        const list = _range_positions;\n        for (let i=0; i< list.length; i += RANGE_POS_TUPLE_SIZE){\n            if (list[i+3] === idx) {\n                return i/RANGE_POS_TUPLE_SIZE;\n            }\n        }\n        return -1\n    }\n\n    function clear(){\n        _idx = 0;\n        _grpIdx = null;\n        _rowIdx = null;\n        _direction = FORWARDS;\n        _range = NULL_RANGE;\n        _range_position_lo = [0, null, null];\n        _range_positions = [];\n        _range_position_hi = [null, null, null];\n    }\n\n    function setNavSet([newNavSet, navIdx, navCount]){\n        navSet = newNavSet;\n        NAV_IDX = navIdx;\n        NAV_COUNT = navCount;\n    }\n\n    function currentRange(){\n        /** @type {import('./group-iterator').RowsIndexTuple} */\n        const result = [[], null];\n        const [rows] = result;\n\n        const {IDX} = metadataKeys;\n        ([_idx, _grpIdx, _rowIdx] = _range_position_lo);\n        if (_idx === 0 && _grpIdx === null && _rowIdx === null){\n            _idx = -1;\n        }\n        _range_positions.length = 0;\n\n        let startIdx = _idx;\n        let row;\n        let i = _range.lo;\n        do {\n            _direction = FORWARDS;\n            ([row, _grpIdx, _rowIdx] = next(groups, data, _grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT));\n            if (row){\n                rows.push(row);\n                _idx += 1;\n                const absRowIdx = _rowIdx === null ? null : row[IDX];\n                _range_positions.push(_idx, _grpIdx, _rowIdx, absRowIdx);\n                i += 1\n            }\n        } while (row && i < _range.hi)\n        if (row){\n            _direction = FORWARDS;\n            const [grpIdx, rowIdx] = [_grpIdx, _rowIdx];\n            [row, _grpIdx, _rowIdx] = next(groups, data, _grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT);\n            _idx += 1;\n            _range_position_hi = [row ? _idx : null, _grpIdx, _rowIdx];\n            ([_grpIdx, _rowIdx] = [grpIdx, rowIdx]);\n        } else {\n            _range_position_hi = [null,null,null];\n        }\n\n        result[1] = startIdx+1;\n        return result;\n\n    }\n\n    function setRange(range, useDelta=true){\n        const rangeDiff = compareRanges(_range, range);\n        const { lo: resultLo, hi: resultHi } = useDelta ? getDeltaRange(_range, range) : getFullRange(range);\n        const {IDX} = metadataKeys;\n\n        /** @type {import('./group-iterator').RowsIndexTuple} */\n        const result = [[], null];\n        const [rows] = result;\n        \n        if (rangeDiff === RangeFlags.NULL){\n            _range_position_lo = [0,null,null];\n            _range_position_hi = [null,null,null];\n            _range_positions.length = 0;\n            return result;\n            \n        } else if (range.lo === _range.lo && useDelta === false){\n            // when we're asked for the same range again, rebuild the range\n            ([_idx, _grpIdx, _rowIdx] = _range_position_lo);\n            _range_positions.length = 0;\n        } else {\n\n            if (_direction === FORWARDS && (rangeDiff & RangeFlags.BWD)){\n                ([_idx, _grpIdx, _rowIdx] = _range_positions);\n            } else if (_direction === BACKWARDS && (rangeDiff & RangeFlags.FWD)){\n                ([_idx, _grpIdx, _rowIdx] = _range_positions.slice(-RANGE_POS_TUPLE_SIZE));\n                _idx += 1;\n            }\n\n            if (rangeDiff === RangeFlags.FWD){\n                skip(range.lo - _range.hi, next);\n                _range_positions.length = 0;\n            } else if (rangeDiff === RangeFlags.BWD){\n                skip(_range.lo - range.hi, previous);\n                _range_positions.length = 0;\n            }\n\n            const loDiff = range.lo - _range.lo;\n            const hiDiff = _range.hi - range.hi;\n            // allow for a range that overshoots data\n            const missingQuota = (_range.hi - _range.lo) - _range_positions.length/RANGE_POS_TUPLE_SIZE;\n\n            if (loDiff > 0){\n                const removed = _range_positions.splice(0,loDiff*RANGE_POS_TUPLE_SIZE);\n                if (removed.length){\n                    _range_position_lo = removed.slice(-RANGE_POS_TUPLE_SIZE);\n\n                    // experiment - is this A) always correct B) enough\n                    if (useDelta === false){\n                        [_idx, _grpIdx, _rowIdx] = _range_position_lo;\n                    }\n\n                }\n            }\n            if (hiDiff > 0){\n                //TODO allow for scenatio where both lo and HI have changed\n                if (hiDiff > missingQuota){\n                    const absDiff = hiDiff - missingQuota;\n                    const removed = _range_positions.splice(-absDiff*RANGE_POS_TUPLE_SIZE,absDiff*RANGE_POS_TUPLE_SIZE);\n                    if (removed.length){\n                        _range_position_hi = removed.slice(0,RANGE_POS_TUPLE_SIZE);\n                    }\n                }\n            }\n\n        }\n\n        let row;\n        let startIdx = null;\n\n        if ((rangeDiff & RangeFlags.REDUCE) === 0){\n            if ((rangeDiff & RangeFlags.FWD) || (rangeDiff === RangeFlags.SAME)){\n                let i = resultLo;\n                startIdx = _idx;\n                do {\n                    _direction = FORWARDS;\n                    ([row, _grpIdx, _rowIdx] = next(groups, data, _grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT));\n                    if (row){\n                        rows.push(row);\n                        const absRowIdx = _rowIdx === null ? null : row[IDX];\n                        _range_positions.push(_idx, _grpIdx, _rowIdx, absRowIdx);\n                        i += 1\n                        _idx += 1;\n                    }\n                } while (row && i < resultHi)\n                if (row){\n                    _direction = FORWARDS;\n                    const [grpIdx, rowIdx] = [_grpIdx, _rowIdx];\n                    ([row, _grpIdx, _rowIdx] = next(groups, data ,_grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT));\n                    _range_position_hi = [row ? _idx : null, _grpIdx, _rowIdx];\n                    ([_grpIdx, _rowIdx] = [grpIdx, rowIdx]);\n                } else {\n                    _range_position_hi = [null,null,null];\n                }\n\n            } else {\n                let i = resultHi - 1;\n                do {\n                    _direction = BACKWARDS;\n                    ([row, _grpIdx, _rowIdx] = previous(groups, data, _grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT));\n                    if (row){\n                        _idx -= 1;\n                        rows.unshift(row);\n                        const absRowIdx = _rowIdx === null ? null : row[IDX];\n                        _range_positions.unshift(_idx, _grpIdx, _rowIdx, absRowIdx);\n                        i -= 1\n                    }\n                } while (row && i >= resultLo)\n                startIdx = _idx;\n                if (row){\n                    const [grpIdx, rowIdx] = [_grpIdx, _rowIdx];\n                    _direction = BACKWARDS;\n                    [row, _grpIdx, _rowIdx] = previous(groups, data, _grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT);\n                    _range_position_lo = [row ? _idx-1 : 0, _grpIdx, _rowIdx];\n                    ([_grpIdx, _rowIdx] = [grpIdx, rowIdx]);\n                } else {\n                    _range_position_lo = [0,null,null];\n                }\n\n            }\n\n        } else {\n            // does startIdx remain as null ?\n            // reduced range, adjust the current pos. DIrection can only be a guess, but if it's wrong\n            // the appropriate adjustment will be made nest time range is set\n            if (rangeDiff & RangeFlags.FWD){\n                console.log(`adjust thye idx`);\n                ([_idx, _grpIdx, _rowIdx] = _range_positions.slice(-RANGE_POS_TUPLE_SIZE));\n                _idx += 1;\n            } else {\n                ([_idx, _grpIdx, _rowIdx] = _range_positions);\n            }\n        }\n\n        _range = range;\n        result[1] = startIdx\n        return result;\n        // return [rows, startIdx];\n    }\n\n    function skip(n, fn){\n\n        let i=0;\n        let row;\n\n        do {\n            [row, _grpIdx, _rowIdx] = fn(groups, data, _grpIdx, _rowIdx, navSet, NAV_IDX, NAV_COUNT);\n            if (fn === next){\n                _idx += 1;\n            } else {\n                _idx -= 1;\n            }\n            i += 1;\n\n        } while (row && i < n)\n        if (fn === next){\n            _range_position_lo = [_idx-1, _grpIdx, _rowIdx];\n        } else {\n            _range_position_hi = [_idx, _grpIdx, _rowIdx];\n        }\n    }\n\n}\n\nfunction getAbsRowIdx(group, relRowIdx, navSet, NAV_IDX){\n    return navSet[group[NAV_IDX] + relRowIdx];\n}\n\nfunction next(groups, rows, grpIdx, rowIdx, navSet, NAV_IDX, NAV_COUNT){\n    if (grpIdx === null){\n        grpIdx = -1;\n        do {\n            grpIdx += 1;\n        } while (grpIdx < groups.length && (\n            (getCount(groups[grpIdx],NAV_COUNT) === 0)\n        ));\n\n        if (grpIdx >= groups.length){\n            return NO_RESULT;\n        } else {\n            return [groups[grpIdx], grpIdx, null];\n        }\n    } else if (grpIdx >= groups.length){\n        return NO_RESULT;\n    } else {\n        let groupRow = groups[grpIdx];\n        const depth = groupRow[metadataKeys.DEPTH];\n        const count = getCount(groupRow,NAV_COUNT);\n        // Note: we're unlikely to be passed the row if row count is zero\n        if (depth === 1 && count !== 0 && (rowIdx === null || rowIdx < count - 1)){\n            rowIdx = rowIdx === null ? 0 : rowIdx + 1;\n            const absRowIdx = getAbsRowIdx(groupRow, rowIdx, navSet, NAV_IDX)\n            const row = leafRow(rows[absRowIdx])\n            return [row, grpIdx, rowIdx === null ? 0 : rowIdx];\n        } else if (depth > 0){\n\n            do {\n                grpIdx += 1;\n            } while (grpIdx < groups.length && (\n                (getCount(groups[grpIdx],NAV_COUNT) === 0)\n            ));\n            if (grpIdx >= groups.length){\n                return NO_RESULT;\n            } else {\n                return [groups[grpIdx], grpIdx, null];\n            }\n        } else {\n            const absDepth = Math.abs(depth);\n            do {\n                grpIdx += 1;\n            } while (grpIdx < groups.length && (\n                (Math.abs(groups[grpIdx][metadataKeys.DEPTH]) < absDepth) ||\n                (getCount(groups[grpIdx],NAV_COUNT) === 0)\n            ));\n            if (grpIdx >= groups.length){\n                return NO_RESULT;\n            } else {\n                return [groups[grpIdx], grpIdx, null];\n            }\n        }\n    }\n}\n\nfunction previous(groups, data, grpIdx, rowIdx, navSet, NAV_IDX, NAV_COUNT){\n    if (grpIdx !== null && groups[grpIdx][metadataKeys.DEPTH] === 1 && typeof rowIdx === 'number'){\n        let lastGroup = groups[grpIdx];\n        if (rowIdx === 0){\n            return [lastGroup, grpIdx, null];\n        } else {\n            rowIdx -= 1;\n            const absRowIdx = getAbsRowIdx(lastGroup, rowIdx, navSet, NAV_IDX)\n            const row = leafRow(data[absRowIdx])\n            return [row, grpIdx, rowIdx];\n        }\n    } else {\n        if (grpIdx === null){\n            grpIdx = groups.length-1;\n        } else if (grpIdx === 0) {\n            return NO_RESULT;\n        } else {\n            grpIdx -= 1;\n        }\n        let lastGroup = groups[grpIdx];\n        if (lastGroup[metadataKeys.DEPTH] === 1){\n            rowIdx = getCount(lastGroup, NAV_COUNT) - 1;\n            const absRowIdx = getAbsRowIdx(lastGroup, rowIdx, navSet, NAV_IDX)\n            const row = leafRow(data[absRowIdx])\n            return [row, grpIdx, rowIdx];\n        }\n        while (lastGroup[metadataKeys.PARENT_IDX] !== null && groups[lastGroup[metadataKeys.PARENT_IDX]][metadataKeys.DEPTH] < 0){\n            grpIdx = lastGroup[metadataKeys.PARENT_IDX];\n            lastGroup = groups[grpIdx];\n        }\n        return [lastGroup, grpIdx, null];\n    }\n}\n","import { ASC, mapSortCriteria, extendsFilter, functor as filterPredicate, metadataKeys } from '@heswell/utils';\nimport BaseRowSet from './rowSet';\nimport {\n    expandRow,\n    findSortedCol,\n    findDoomedColumnDepths,\n    findGroupPositions,\n    getGroupStateChanges,\n    groupbyExtendsExistingGroupby, groupbyReducesExistingGroupby,\n    groupbySortReversed,\n    groupRows,\n    incrementDepth, decrementDepth,\n    splitGroupsAroundDoomedGroup, lowestIdxPointer,\n    GroupIdxTracker, SimpleTracker, getCount,\n    aggregateGroup,\n    findAggregatedColumns,\n    adjustGroupIndices,\n    adjustLeafIdxPointers,\n    allGroupsExpanded\n} from '../group-utils';\nimport { sortBy, sortPosition } from '../sort';\nimport GroupIterator from '../group-iterator';\nimport { NULL_RANGE } from '../range-utils';\nimport { leafRow } from '../group-utils';\n\nconst EMPTY_ARRAY = [];\n\nexport class GroupRowSet extends BaseRowSet {\n\n    constructor(rowSet, columns, groupby, groupState, sortCriteria = null, filter=rowSet.currentFilter) {\n        super(rowSet.table, rowSet.baseOffset);\n        this.columns = columns;\n        this.groupby = groupby;\n        this.groupState = groupState;\n        this.aggregations = [];\n        this.currentLength = 0; // TODO\n        this.groupRows = [];\n        this.aggregatedColumn = {};\n\n        this.collapseChildGroups = this.collapseChildGroups.bind(this);\n        this.countChildGroups = this.countChildGroups.bind(this);\n\n        columns.forEach(column => {\n            if (column.aggregate) {\n                const key = rowSet.table.columnMap[column.name];\n                this.aggregations.push([key, column.aggregate]); // why ?\n                this.aggregatedColumn[key] = column.aggregate;\n            }\n        });\n        this.expandedByDefault = false;\n        this.sortCriteria = Array.isArray(sortCriteria) && sortCriteria.length\n            ? sortCriteria\n            : null;\n\n        // can we lazily build the sortSet as we fetch data for the first time ?\n        this.sortSet = rowSet.data.map((d,i) => i);\n        // we will store an array of pointers to parent Groups.mirroring sequence of leaf rows\n        this.rowParents = Array(rowSet.data.length);\n\n        this.applyGroupby(groupby);\n\n\n        const [navSet, IDX, COUNT] = this.selectNavigationSet(false);\n        // TODO roll the IDX and COUNT overrides into meta\n        this.iter = GroupIterator(this.groupRows, navSet, this.data, IDX, COUNT);\n\n        if (filter){\n            this.filter(filter);\n        }\n\n    }\n\n    get length() {\n        return this.currentLength;\n    }\n    get first() {\n        return this.data[0];\n    }\n    get last(){\n        return this.data[this.data.length - 1];\n    }\n\n    currentRange(){\n        return this.setRange(this.range, false);\n    }\n\n    clearRange(){\n        this.iter.clear();\n        this.range = NULL_RANGE;\n    }\n\n    setSubscribedColumns(columns) {\n        console.log(`GroupRowset setSubscribedColumns ${columns.join(',')}`)\n    }\n\n    setRange(range, useDelta=true){\n        // A common scenario, eg after groupBy or sort, reposition range at top of viewport\n        if (useDelta === false && range.lo === 0){\n            this.clearRange();\n        }\n\n        const [rowsInRange, idx] = !useDelta && range.lo === this.range.lo && range.hi === this.range.hi\n            ? this.iter.currentRange()\n            : this.iter.setRange(range, useDelta);\n\n        const filterCount = this.filterSet && metadataKeys.FILTER_COUNT;\n        const rows = rowsInRange.map((row,i) => this.cloneRow(row, idx+i, filterCount));\n        this.range = range;\n        const length = this.length || 0;\n        return {\n            dataType: this.type,\n            rows,\n            range,\n            size: length,\n            offset: this.offset,\n            stats: undefined\n        };\n    }\n\n    cloneRow(row, idx, FILTER_COUNT){\n        const {IDX, DEPTH, COUNT} = metadataKeys;\n        const dolly = row.slice();\n        dolly[IDX] = idx + this.offset;\n\n        if (FILTER_COUNT && dolly[DEPTH] !== 0 && typeof dolly[FILTER_COUNT] === 'number'){\n            dolly[COUNT] = dolly[FILTER_COUNT]\n        }\n        return dolly;\n    }\n\n    applyGroupby(groupby, rows=this.data){\n        const { columns } = this;\n        this.groupRows.length = 0;\n        const groupCols = mapSortCriteria(groupby, this.table.columnMap);\n        this.groupRows = groupRows(rows, this.sortSet, columns, this.table.columnMap, groupCols, {\n            groups: this.groupRows, rowParents: this.rowParents\n        })\n        this.currentLength = this.countVisibleRows(this.groupRows);\n    }\n\n    groupBy(groupby) {\n\n        if (groupbySortReversed(groupby, this.groupby)) {\n            this.sortGroupby(groupby);\n        } else if (groupbyExtendsExistingGroupby(groupby, this.groupby)) {\n            this.extendGroupby(groupby)\n            this.currentLength = this.countVisibleRows(this.groupRows, this.filterSet !== null);\n        } else if (groupbyReducesExistingGroupby(groupby, this.groupby)) {\n            this.reduceGroupby(groupby);\n            this.range = NULL_RANGE\n            this.iter.clear();\n            this.currentLength = this.countVisibleRows(this.groupRows, this.filterSet !== null);\n        } else {\n            this.applyGroupby(groupby);\n        }\n        this.groupby = groupby;\n\n    }\n\n    // User interaction will never produce more than one change, but programatic change might !\n    //TODO if we have sortCriteria, apply to leaf rows as we expand\n    setGroupState(groupState) {\n        // onsole.log(`[groupRowSet.setGroupState] ${JSON.stringify(groupState,null,2)}`)\n        const changes = getGroupStateChanges(groupState, this.groupState);\n        changes.forEach(([key, ,isExpanded]) => {\n            const {groupRows} = this;\n            if (key === '*') {\n                this.toggleAll(isExpanded);\n                this.currentLength = this.countVisibleRows(groupRows, false);\n            } else {\n                const groupIdx= this.findGroupIdx(key);\n                if (groupIdx !== -1){\n                    if (isExpanded){\n                        this.currentLength += this.expandGroup(groupIdx, groupRows);\n                    } else {\n                        this.currentLength -= this.collapseGroup(groupIdx, groupRows);\n                    }\n                } else {\n                    console.warn(`setGroupState could not find row to toggle`)\n                }\n            }\n        })\n        this.groupState = groupState;\n    }\n\n    expandGroup(idx, groups){\n        return this.toggleGroup(idx, groups, this.countChildGroups);\n    }\n\n    collapseGroup(idx, groups){\n        return this.toggleGroup(idx, groups, this.collapseChildGroups);\n    }\n\n    toggleGroup(groupIdx, groupRows, processChildGroups){\n        const {DEPTH, COUNT, FILTER_COUNT} = metadataKeys;\n        let adjustment = 0;\n        const groupRow = groupRows[groupIdx];\n        const depth = groupRow[DEPTH];\n        const useFilter = this.filterSet !== null;\n        groupRow[DEPTH] = -depth;\n        if (Math.abs(depth) === 1){\n            const COUNT_IDX = useFilter ? FILTER_COUNT : COUNT;\n            adjustment = groupRow[COUNT_IDX];\n        } else {\n            adjustment = processChildGroups(Math.abs(depth)-1, groupIdx+1, groupRows, useFilter)\n        }\n        return adjustment;\n    }\n\n    countChildGroups(childDepth, startIdx, groupRows, useFilter){\n        const {DEPTH, FILTER_COUNT} = metadataKeys;\n        let adjustment = 0;\n        for (let i=startIdx; i<groupRows.length; i++){\n            const nextDepth = groupRows[i][DEPTH];\n            if (Math.abs(nextDepth) === childDepth){\n                if (!useFilter || groupRows[i][FILTER_COUNT] > 0){\n                    adjustment += 1;\n                }\n            } else if (Math.abs(nextDepth) > childDepth){\n                break;\n            }\n        }\n        return adjustment;\n    }\n\n    collapseChildGroups(childDepth, startIdx, groupRows, useFilter){\n        const {DEPTH, FILTER_COUNT} = metadataKeys;\n        let adjustment = 0;\n        for (let i=startIdx; i<groupRows.length; i++){\n            const nextDepth = groupRows[i][DEPTH];\n            if (Math.abs(nextDepth) === childDepth){\n                if (!useFilter || groupRows[i][FILTER_COUNT] > 0){\n                    adjustment += 1;\n                    if (nextDepth > 0){\n                        adjustment += this.collapseGroup(i, groupRows);\n                    }\n                }\n            } else if (Math.abs(nextDepth) > childDepth){\n                break;\n            }\n        }\n        return adjustment;\n    }\n\n    sort(sortCriteria) {\n        const {groupRows: groups} = this;\n        const { IDX, DEPTH, COUNT, IDX_POINTER } = metadataKeys;\n        this.sortCriteria = Array.isArray(sortCriteria) && sortCriteria.length\n            ? sortCriteria\n            : null;\n\n        const sortCols = mapSortCriteria(sortCriteria, this.table.columnMap);\n        //TODO only need to handle visible rows\n        for (let i=0;i<groups.length;i++){\n            const groupRow = groups[i];\n            const depth = groupRow[DEPTH]\n            const count = groupRow[COUNT];\n            const absDepth = Math.abs(depth);\n            const sortIdx = groupRow[IDX_POINTER];\n            if (absDepth === 1){\n                this.sortDataSubset(sortIdx, count, sortCols, IDX);\n\n            }\n        }\n    }\n\n    sortDataSubset(startIdx, length, sortCriteria, IDX){\n        const rows = [];\n        for (let i=startIdx;i<startIdx+length;i++){\n            const rowIdx = this.sortSet[i];\n            rows.push(this.data[rowIdx])\n        }\n        rows.sort(sortBy(sortCriteria));\n        for (let i=0;i<rows.length;i++){\n            this.sortSet[i+startIdx] = rows[i][IDX];\n        }\n    }\n\n    clearFilter(/*cloneChanges*/) {\n        this.currentFilter = null;\n        this.filterSet = null;\n        // rebuild agregations for groups where filter count is less than count, remove filter count\n        const { data: rows, groupRows, sortSet, columns } = this;\n        const { COUNT, FILTER_COUNT, NEXT_FILTER_IDX } = metadataKeys;\n        const aggregations = findAggregatedColumns(columns, this.table.columnMap, this.groupby);\n\n        for (let i=0;i<groupRows.length; i++){\n            let groupRow = groupRows[i];\n            if (typeof groupRow[FILTER_COUNT] === 'number' && groupRow[COUNT] > groupRow[FILTER_COUNT]){\n                aggregateGroup(groupRows, i, sortSet, rows, columns, aggregations);\n                groupRow[FILTER_COUNT] = null;\n                groupRow[NEXT_FILTER_IDX] = null;\n            }\n        }\n\n        this.iter.setNavSet(this.selectNavigationSet(false));\n        this.currentLength = this.countVisibleRows(groupRows, false);\n    }\n\n    filter(filter){\n        const extendsCurrentFilter = extendsFilter(this.currentFilter, filter);\n        const fn = filter && filterPredicate(this.table.columnMap, filter);\n        const { COUNT, DEPTH, PARENT_IDX, FILTER_COUNT, NEXT_FILTER_IDX } = metadataKeys;\n        const { data: rows, groupRows: groups } = this;\n        let [navSet, NAV_IDX, NAV_COUNT] = this.selectNavigationSet(extendsCurrentFilter && this.filterSet)\n        const newFilterSet= [];\n\n        for (let i=0;i<groups.length; i++){\n            let groupRow = groups[i];\n            const depth = groupRow[DEPTH];\n            const count = getCount(groupRow,NAV_COUNT, COUNT);\n            const absDepth = Math.abs(depth);\n\n            if (absDepth === 1){\n                const sortIdx = groupRow[NAV_IDX];\n                let rowCount = 0;\n\n                for (let ii=sortIdx; ii<sortIdx+count; ii++){\n                    const rowIdx = navSet[ii];\n                    const row = rows[rowIdx];\n                    const includerow = fn(row);\n                    if (includerow) {\n                        rowCount += 1;\n                        if (rowCount === 1){\n                            groupRow[NEXT_FILTER_IDX] = newFilterSet.length;\n                        }\n                        newFilterSet.push(rowIdx)\n                    }\n                }\n\n                groupRow[FILTER_COUNT] = rowCount;\n                let aggregations = EMPTY_ARRAY;\n                // we cannot be sure what filter changes have taken effect, so we must recalculate aggregations\n                if (this.aggregations.length){\n                    aggregations = this.aggregations.map(([i, a]) => [i,a,0])\n                    const len = newFilterSet.length;\n                    for (let ii=len-rowCount;ii<len;ii++){\n                        const rowIdx = newFilterSet[ii];\n                        const row = rows[rowIdx];\n                        for (let j = 0; j < aggregations.length; j++) {\n                            let [colIdx] = aggregations[j];\n                            aggregations[j][2] += row[colIdx];\n                        }\n                    }\n                    \n                    // 2) store aggregates at lowest level of the group hierarchy\n                    aggregations.forEach(aggregation => {\n                        const [colIdx, type, sum] = aggregation;\n                        const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n                        if (type === 'sum') {\n                            groupRow[dataIdx] = sum;\n                        } else if (type === 'avg') {\n                            groupRow[dataIdx] = sum / rowCount;\n                        }\n                    })\n                }\n\n                // update parent counts\n                if (rowCount > 0){\n                    while (groupRow[PARENT_IDX] !== null){\n                        groupRow = groups[groupRow[PARENT_IDX]];\n\n                        aggregations.forEach(aggregation => {\n                            const [colIdx, type, sum] = aggregation;\n                            const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n                            if (type === 'sum') {\n                                groupRow[dataIdx] += sum;\n                            } else if (type === 'avg') {\n                                const originalCount = groupRow[FILTER_COUNT];\n                                const originalSum = originalCount * groupRow[dataIdx];\n                                groupRow[dataIdx] = (originalSum + sum) / (originalCount + rowCount);\n                            }\n                        })\n                        groupRow[FILTER_COUNT] += rowCount;\n                    }\n                }\n\n            } else {\n                // Higher-level group aggregations are calculated from lower level groups\n                // initialize aggregated columns\n                groupRow[FILTER_COUNT] = 0;\n                this.aggregations.forEach(aggregation => {\n                    const [colIdx] = aggregation;\n                    const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n                    groupRow[dataIdx] = 0;\n                })\n            }\n        }\n        this.filterSet = newFilterSet;\n        this.currentFilter = filter;\n        this.currentLength = this.countVisibleRows(this.groupRows, true);\n\n        this.iter.setNavSet(this.selectNavigationSet(true))\n\n    }\n\n    update(rowIdx, updates){\n        const {groupRows: groups, offset, rowParents, range: {lo}} = this\n        const { COUNT, FILTER_COUNT, PARENT_IDX } = metadataKeys;\n\n        let groupUpdates;\n        const rowUpdates = [];\n\n        for (let i = 0; i < updates.length; i += 3) {\n            // the col mappings in updates refer to base column definitions\n            const colIdx = updates[i];\n            const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n\n            const originalValue = updates[i + 1];\n            const value = updates[i + 2];\n            rowUpdates.push(dataIdx,originalValue,value);\n\n            let grpIdx = rowParents[rowIdx];\n            // this seems to return 0 an awful lot\n            let ii = 0;\n            \n            // If this column is being aggregated\n            if (this.aggregatedColumn[colIdx]){\n\n                groupUpdates = groupUpdates || [];\n                // collect adjusted aggregations for each group level\n                do {\n                    let groupRow = groups[grpIdx];\n                    let originalGroupValue = groupRow[dataIdx];\n                    const diff = value - originalValue;\n                    const type = this.aggregatedColumn[colIdx];\n                    if (type === 'sum'){\n                        // ... wnd in the groupRow we have a further offset of 2 ...\n                        groupRow[dataIdx] += diff;// again with the +2\n                    } else if (type === 'avg'){\n                        const count = getCount(groupRow, FILTER_COUNT, COUNT);\n                        groupRow[dataIdx] = ((groupRow[dataIdx] * count) + diff) / count;\n                    }\n\n                    (groupUpdates[ii] || (groupUpdates[ii]=[grpIdx])).push(dataIdx, originalGroupValue, groupRow[dataIdx])\n\n                    grpIdx = groupRow[PARENT_IDX];\n                    ii += 1;\n\n                } while (grpIdx !== null)\n\n            }\n        }\n\n        const outgoingUpdates = [];\n        // check rangeIdx for both row and group updates, if they are not in range, they have not been\n        // sent to client and do not need to be added to outgoing updates\n        if (groupUpdates){\n            // the groups are currently in reverse order, lets send them out outermost group first\n            for (let i=groupUpdates.length-1; i >=0; i--){\n                const [grpIdx, ...updates] = groupUpdates[i];\n                // won't work - need to chnage groupIterator\n                const rangeIdx = this.iter.getRangeIndexOfGroup(grpIdx);\n                if (rangeIdx !== -1){\n                    outgoingUpdates.push([lo+rangeIdx+offset, ...updates]);\n                }\n            }\n        }\n        const rangeIdx = this.iter.getRangeIndexOfRow(rowIdx);\n        if (rangeIdx !== -1){\n            // onsole.log(`[GroupRowSet.update] updates for row idx ${idx} ${rangeIdx+offset} ${JSON.stringify(rowUpdates)}`)\n            outgoingUpdates.push([lo+rangeIdx+offset, ...rowUpdates]);\n        }\n        \n        return outgoingUpdates;\n    }\n\n    insert(newRowIdx, row){\n        // TODO look at append and idx manipulation for insertion at head.\n        const { groupRows: groups, groupby, data: rows, sortSet, columns, iter: iterator } = this\n\n        let dataGroupCols = mapSortCriteria(groupby, this.table.columnMap, metadataKeys.count - 2); // <<<<<<<<<\n        const groupPositions = findGroupPositions(groups, dataGroupCols, leafRow(row));\n\n        const {IDX, COUNT, KEY, IDX_POINTER} = metadataKeys;\n        const GROUP_KEY_SORT = [[KEY, 'asc']]\n        const allGroupsExist = groupPositions.length === groupby.length;\n        const noGroupsExist = groupPositions.length === 0;\n        const someGroupsExist = !noGroupsExist && !allGroupsExist;\n        let result;\n        let newGroupIdx = null;\n\n        if (allGroupsExist){\n            // all necessary groups are already in place, we will just insert a row and update counts/aggregates\n            let grpIdx = groupPositions[groupPositions.length-1];\n            const groupRow = groups[grpIdx];\n            this.rowParents[newRowIdx] = grpIdx;\n            let count = groupRow[COUNT];\n\n            const insertionPoint = groupRow[IDX_POINTER] + count;\n            // all existing pointers from the insertionPoint forward are going to be displaced by +1\n            adjustLeafIdxPointers(groups, insertionPoint);\n            sortSet.splice(insertionPoint,0,row[IDX]);\n            if (allGroupsExpanded(groups, groupRow)){\n                this.currentLength += 1;\n            }\n            \n        } else {\n            let groupCols = mapSortCriteria(groupby, this.table.columnMap);\n            newGroupIdx = sortPosition(groups, sortBy(GROUP_KEY_SORT), expandRow(groupCols, row, metadataKeys), 'last-available');\n            sortSet.push(newRowIdx);\n            let nestedGroups, baseGroupby, rootIdx;\n\n            if (someGroupsExist){\n                baseGroupby = groupCols.slice(0,groupPositions.length)\n                rootIdx = groups[groupPositions[groupPositions.length-1]][IDX];\n                groupCols = groupCols.slice(groupPositions.length);\n            }\n\n            nestedGroups = groupRows(rows, sortSet, columns, this.table.columnMap, groupCols, {\n                startIdx: sortSet.length - 1, length: 1, groupIdx: newGroupIdx-1,\n                baseGroupby, rootIdx\n            });\n\n            adjustGroupIndices(groups, newGroupIdx, nestedGroups.length);\n            groups.splice.apply(groups,[newGroupIdx,0].concat(nestedGroups));\n        }\n\n        // Note: we update the aggregates \n        this.updateAggregatedValues(groupPositions, row);\n        this.incrementGroupCounts(groupPositions);\n\n        iterator.refresh(); // force iterator to rebuild rangePositions\n        let rangeIdx = allGroupsExist\n            ? iterator.getRangeIndexOfRow(newRowIdx)\n            : iterator.getRangeIndexOfGroup(newGroupIdx);\n        \n        if (rangeIdx !== -1){\n            // New row is visible within viewport so we will force render all rows\n            result = {replace: true}\n            if (newGroupIdx !== null){\n                this.currentLength += 1;\n            }\n        } else if (noGroupsExist === false){\n            // new row is not visible as group is collapsed, but we need to update groiup row(s)\n            result = {updates: this.collectGroupUpdates(groupPositions)}\n        }\n\n        return result;\n    }\n\n    incrementGroupCounts(groupPositions){\n        const {groupRows} = this;\n        const {COUNT} = metadataKeys;\n        groupPositions.forEach(grpIdx => {\n            const group = groupRows[grpIdx];\n            group[COUNT] += 1;\n        })\n    }\n\n    updateAggregatedValues(groupPositions, row){\n        const { groupRows } = this;\n\n        groupPositions.forEach(grpIdx => {\n            const groupRow = groupRows[grpIdx];\n            for (let [colIdx, type] of this.aggregations){\n                const value = row[colIdx];\n                const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n                const groupValue = groupRow[dataIdx]\n                if (type === 'sum'){\n                    groupRow[dataIdx] = groupValue + value;\n                } else if (type === 'avg'){\n                    const originalCount = groupRow[metadataKeys.COUNT]; // do we need to consider the FILTER_COUNT ?\n                    const originalSum = originalCount * groupRow[dataIdx];\n                    groupRow[dataIdx] = (originalSum + value) / (originalCount + 1);\n\n                }\n            }\n        })\n\n    }\n\n    collectGroupUpdates(groupPositions){\n        const {aggregations, groupRows: groups, offset} = this;\n        const {COUNT} = metadataKeys;\n        const updates = [];\n        for (let grpIdx of groupPositions){\n            const rangeIdx = this.iter.getRangeIndexOfGroup(grpIdx);\n            if (rangeIdx !== -1){\n                const group = groups[grpIdx];\n                const update = [rangeIdx+offset, COUNT, group[COUNT]]\n                for (let [colIdx] of aggregations){\n                    const dataIdx =colIdx +  metadataKeys.count - 2; // <<<<<<<<<<<\n                    update.push(dataIdx, group[dataIdx]);\n                }\n                updates.push(update);\n            }\n        }\n        return updates;\n    }\n\n\n\n    // start with a simplesequential search\n    findGroupIdx(groupKey){\n        const {groupRows} = this;\n        for (let i=0;i<groupRows.length;i++){\n            if (groupRows[i][metadataKeys.KEY] === groupKey){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    //TODO simple implementation first\n    toggleAll(isExpanded) {\n        const sign = isExpanded ? 1 : -1;\n        // iterate groupedRows and make every group row depth positive,\n        // Then visible rows is not going to be different from grouped rows\n        const {DEPTH} = metadataKeys;\n        const { groupRows: groups } = this;\n        this.expandedByDefault = isExpanded;\n        for (let i = 0, len = groups.length; i < len; i++) {\n            const depth = groups[i][DEPTH];\n            // if (depth !== 0) {\n            groups[i][DEPTH] = Math.abs(depth) * sign;\n            // }\n        }\n    }\n\n    sortGroupby(groupby){\n        const { IDX, KEY, DEPTH, IDX_POINTER, PARENT_IDX } = metadataKeys;\n        const {groupRows} = this;\n        const groupCols = mapSortCriteria(groupby, this.table.columnMap, metadataKeys.count - 2);\n        const [colIdx, depth] = findSortedCol(groupby, this.groupby);\n        let count = 0;\n        let i=0;\n        for (;i<groupRows.length;i++){\n            if (Math.abs(groupRows[i][DEPTH]) > depth){\n                if (count > 0){\n                    this.sortGroupRowsSubset(groupCols, colIdx, i-count, count)\n                    count = 0;\n                }\n            } else {\n                count += 1;\n            }\n        }\n\n        this.sortGroupRowsSubset(groupCols, colIdx, i-count, count)\n\n        const tracker = new SimpleTracker(groupby.length)\n        this.groupRows.forEach((groupRow,i) => {\n            const depth = groupRow[DEPTH];\n            const groupKey = groupRow[KEY]\n            const absDepth = Math.abs(depth);\n            tracker.set(absDepth, i, groupKey)\n            groupRow[IDX] = i;\n            if (absDepth > 1){\n                groupRow[IDX_POINTER] = i+1;\n            }\n            if (tracker.hasParentPos(absDepth)){\n                groupRow[PARENT_IDX] = tracker.parentPos(absDepth);\n            }\n        });\n    }\n\n    sortGroupRowsSubset(groupby, colIdx, startPos=0, length=this.groupRows.length){\n        const {groupRows} = this;\n        let insertPos = startPos + length;\n        const [groupColIdx, direction] = groupby[colIdx];\n        const before = (k1, k2) => direction === ASC ? k2 > k1 : k1 > k2;\n        const after = (k1, k2) => direction === ASC ? k2 < k1 : k1 < k2;\n        let currentKey = null;\n        for (let i=startPos;i<startPos+length;i++){\n            const key = groupRows[i][groupColIdx];\n            if (currentKey === null){\n                currentKey = key;\n            } else if (before(key,currentKey)){\n                const splicedRows = groupRows.splice(startPos,i-startPos);\n                insertPos -= splicedRows.length;\n                groupRows.splice.apply(groupRows, [insertPos,0].concat(splicedRows));\n                currentKey = key;\n                i = startPos-1;\n            } else if (after(key,currentKey)){\n                break;\n            }\n        }\n    }\n\n    // there is a current assumption here that new col(s) are always added at the end of existing cols in the groupBy\n    // Need to think about a new col inserted at start or in between existing cols \n    //TODO we might want to do this on expanded nodes only and repat in a lazy fashion as more nodes are revealed\n    extendGroupby(groupby) {\n        const groupCols = mapSortCriteria(groupby, this.table.columnMap);\n        const baseGroupCols = groupCols.slice(0, this.groupby.length);\n        const newGroupbyClause = groupCols.slice(this.groupby.length);\n        const {groupRows: groups, groupby: baseGroupby, data: rows, columns, sortSet, filterSet} = this;\n        const { IDX_POINTER, PARENT_IDX, NEXT_FILTER_IDX } = metadataKeys;\n        const baseLevels = baseGroupby.length;\n        const tracker = new GroupIdxTracker(baseLevels-1);\n        const filterFn = this.currentFilter\n            ? filterPredicate(this.table.columnMap, this.currentFilter)\n            : null;\n\n        // we are going to insert new rows into groupRows and update the PARENT_IDX pointers in data rows\n        for (let i=0;i<groups.length;i++){\n            const groupRow = groups[i];\n            if (tracker.idxAdjustment){\n                groupRow[metadataKeys.IDX] += tracker.idxAdjustment;\n            }\n\n            const rootIdx = groupRow[metadataKeys.IDX];\n            const depth = groupRow[metadataKeys.DEPTH];\n            const length = groupRow[metadataKeys.COUNT];\n            const groupKey = groupRow[metadataKeys.KEY];\n\n            const absDepth = Math.abs(depth);\n            groupRow[metadataKeys.DEPTH] = incrementDepth(depth);\n            const filterLength = groupRow[metadataKeys.FILTER_COUNT];\n            const filterIdx = groupRow[NEXT_FILTER_IDX];\n            groupRow[metadataKeys.NEXT_FILTER_IDX] = undefined;\n\n            if (tracker.hasPrevious(absDepth+1)){\n                groupRow[PARENT_IDX] += tracker.previous(absDepth+1);\n            }\n\n            if (absDepth === 1){\n                const startIdx = groupRow[IDX_POINTER]\n                const nestedGroupRows = groupRows(rows, sortSet, columns, this.table.columnMap, newGroupbyClause, {\n                    startIdx,\n                    length,\n                    rootIdx,\n                    baseGroupby: baseGroupCols,\n                    groupIdx: rootIdx,\n                    filterIdx,\n                    filterLength,\n                    filterSet,\n                    filterFn,\n                    rowParents: this.rowParents\n                });\n                const nestedGroupCount = nestedGroupRows.length;\n                // this might be a performance problem for large arrays, might need to concat\n                groups.splice(i+1,0, ...nestedGroupRows)\n                i += nestedGroupCount;\n                tracker.increment(nestedGroupCount)\n            } else {\n                tracker.set(absDepth, groupKey);\n            }\n            // This has to be a pointer into sortSet NOT rows\n            groupRow[IDX_POINTER] = rootIdx+1;\n        }\n    }\n\n    reduceGroupby(groupby) {\n        const { groupRows: groups, filterSet } = this;\n        const [doomed] = findDoomedColumnDepths(groupby, this.groupby);\n        const groupCols = mapSortCriteria(this.groupby, this.table.columnMap);\n        const [lastGroupIsDoomed, baseGroupby, addGroupby] = splitGroupsAroundDoomedGroup(groupCols, doomed);\n        const { IDX, DEPTH, KEY, IDX_POINTER, PARENT_IDX, NEXT_FILTER_IDX } = metadataKeys;\n        const tracker = new GroupIdxTracker(groupby.length);\n        const useFilter = filterSet !== null;\n        let currentGroupIdx = null;\n        let i = 0\n        for (let len=groups.length;i<len;i++){\n            const groupRow = groups[i];\n            const depth = groupRow[DEPTH];\n            const groupKey = groupRow[KEY];\n            const absDepth = Math.abs(depth);\n\n            if (absDepth === doomed){\n                this.reParentLeafRows(i, currentGroupIdx);\n                groups.splice(i,1);\n                i -= 1;\n                len -= 1;\n                tracker.increment(1);\n            } else {\n                if (absDepth > doomed){\n                    tracker.set(absDepth,groupKey);\n                    if (absDepth === doomed + 1){\n                        if (lastGroupIsDoomed){\n                            // our pointer will no longer be to a child group but (via the sortSet) to the data.\n                            // This can be taken from the first child group (which will be removed)\n                            groupRow[IDX_POINTER] = lowestIdxPointer(groups, IDX_POINTER, DEPTH, i+1, absDepth-1);\n                            groupRow[NEXT_FILTER_IDX] = useFilter ? lowestIdxPointer(groups, NEXT_FILTER_IDX, DEPTH, i+1, absDepth-1) : undefined;\n                        } else if (currentGroupIdx !== null){\n                            const diff = this.regroupChildGroups(currentGroupIdx, i, baseGroupby, addGroupby);\n                            i -= diff;\n                            len -= diff;\n                            tracker.increment(diff);\n                        }\n                    }\n                    currentGroupIdx = i;\n                    if (tracker.hasPrevious(absDepth+1)){\n                        groupRow[PARENT_IDX] -= tracker.previous(absDepth+1);\n                    }\n                    groupRow[DEPTH] = decrementDepth(depth);\n                }\n                if (tracker.idxAdjustment > 0){\n                    groupRow[IDX] -= tracker.idxAdjustment;\n                    if (Math.abs(groupRow[DEPTH]) > 1){\n                        groupRow[IDX_POINTER] -= tracker.idxAdjustment;\n                    }\n                }\n            }\n        }\n        if (!lastGroupIsDoomed){\n            // don't forget the final group ...\n            this.regroupChildGroups(currentGroupIdx, i, baseGroupby, addGroupby)\n        }\n    }\n\n    reParentLeafRows(groupIdx, newParentGroupIdx){\n        // TODO what about filterSet ?\n        const {groupRows: groups, rowParents, sortSet} = this;\n        const {IDX_POINTER, COUNT} = metadataKeys\n        const group = groups[groupIdx];\n        const idx = group[IDX_POINTER];\n        const count = group[COUNT];\n\n        for (let i=idx; i< idx+count; i++){\n            const rowIdx = sortSet[i];\n            rowParents[rowIdx] = newParentGroupIdx; \n        }\n\n    }\n\n    regroupChildGroups(currentGroupIdx, nextGroupIdx, baseGroupby, addGroupby){\n        const { groupRows: groups, data: rows, columns } = this;\n        const { COUNT, IDX_POINTER } = metadataKeys;\n        const group = groups[currentGroupIdx]\n        const length = group[COUNT]\n        const startIdx = groups[currentGroupIdx+1][IDX_POINTER]\n        // We don't really need to go back to rows to regroup, we have partially grouped data already\n        // we could perform the whole operation within groupRows\n        const nestedGroupRows = groupRows(rows, this.sortSet, columns, this.table.columnMap, addGroupby, {\n            startIdx,\n            length,\n            rootIdx: currentGroupIdx,\n            baseGroupby,\n            groupIdx: currentGroupIdx,\n            rowParents: this.rowParents\n        });\n        const existingChildNodeCount = nextGroupIdx - currentGroupIdx - 1;\n        groups.splice(currentGroupIdx+1,existingChildNodeCount,...nestedGroupRows)\n        group[IDX_POINTER] = currentGroupIdx+1;\n        return existingChildNodeCount - nestedGroupRows.length;\n\n    }\n\n    // Note: this assumes no leaf rows visible. Is that always valid ?\n    // NOt after removing a groupBy ! Not after a filter\n    countVisibleRows(groupRows, usingFilter=false){\n        const {DEPTH, COUNT, FILTER_COUNT} = metadataKeys;\n        let count = 0;\n        for (let i=0, len=groupRows.length;i<len;i++){\n            const zeroCount = usingFilter && groupRows[i][FILTER_COUNT] === 0;\n            if (!zeroCount){\n                count += 1;\n            }\n            const depth = groupRows[i][DEPTH];\n            if (depth < 0 || zeroCount){\n                while (i<len-1 && Math.abs(groupRows[i+1][DEPTH]) < -depth){\n                    i += 1;\n                }\n            } else if (depth === 1){\n                count += (usingFilter ? groupRows[i][FILTER_COUNT] : groupRows[i][COUNT])\n            }\n        }\n        return count;\n    }\n\n}\n","/*\n    Inserts (and size records) and updates must be batched separately. Because updates are \n    keyed by index position and index positions may be affected by an insert operation, the\n    timeline must be preserved. Updates can be coalesced until an insert is received. Then\n    the update batch must be closed, to be followed by the insert(s). Similarly, multiple\n    inserts, with no interleaved updates, can be batched (with a single size record). The batch\n    will be closed as soon as the next update is received. So we alternate between update and\n    insert processing, with each transition athe preceeding batch is closed off.\n    An append is a simple insert that has no re-indexing implications.  \n\n*/\nexport default class UpdateQueue {\n\n    constructor(){\n        this._queue = [];\n    }\n\n      get length() { return this._queue.length; }\n\n      update(update) {\n          //TODO we could also coalesce updates into an insert or rowset, if present\n          const batch = this.getCurrentBatch('update');\n\n          const [rowIdx] = update;\n          const {updates} = batch;\n\n          for (let i = 0, len = updates.length; i < len; i++) {\n              if (updates[i][0] === rowIdx) {\n                  // we already have an update for this item, update the update...\n                  let d = updates[i];\n                  for (let colIdx = 1; colIdx < update.length; colIdx += 2) {\n                      const pos = d.indexOf(update[colIdx]);\n                      if (pos === -1) {// should check that it is really a colIdx,not a value\n                          d.push(update[colIdx], update[colIdx + 1]);\n                      } else {\n                          d[pos + 1] = update[colIdx + 1];\n                      }\n                  }\n\n                  return;\n              }\n          }\n          updates.push(update);\n      }\n\n      resize(size) {\n          const batch = this.getCurrentBatch('size');\n          batch.size = size;\n      }\n\n      append(row, offset) {\n          const batch = this.getCurrentBatch('insert');\n          //onsole.log(`UpdateQueue append ${row[0]}`);\n          batch.rows.push(row);\n          batch.offset = offset;\n      }\n\n      replace({rows, filter, size, range, offset}) {\n          const batch = this.getCurrentBatch('rowset');\n          batch.rows = rows;\n          batch.size = size;\n          batch.range = range;\n          batch.offset = offset;\n          // HM, think we should fire an immediate response for filter change\n          batch.filter = filter;\n      }\n\n      popAll() {\n          const results = this._queue;\n          this._queue = [];\n          return results;\n      }\n\n      getCurrentBatch(type) {\n\n          const q = this._queue;\n          const len = q.length;\n\n          let batch = len === 0 || type === 'rowset'\n              ? (q[0] = createBatch(type))\n              : q[len - 1];\n\n          if (batch.type !== type) {\n              // roll size recored into subsequent insert \n              if (type === 'insert' && batch.type === 'size') {\n                  batch.type = 'insert';\n                  batch.rows = [];\n              } else if (type === 'size' && batch.type === 'insert') {\n                  // that's ok - go ahead and update size on the insert batch\n              } else {\n                  batch = (q[len] = createBatch(type));\n              }\n          }\n\n          return batch;\n\n      }\n  }\n\nfunction createBatch(type) {\n    switch (type) {\n    case 'rowset': return { type, rows: [] };\n    case 'update': return { type, updates: [] };\n    case 'insert': return { type, rows: [] };\n    case 'size': return { type };\n    default: throw Error('Unknown batch type');\n    }\n}\n","import { RowSet, GroupRowSet } from './rowset/index';\nimport { addFilter, DataTypes, IN, NOT_IN, getFilterType, resetRange } from '@heswell/utils';\nimport UpdateQueue from './update-queue';\n\nconst DEFAULT_INDEX_OFFSET = 0;\nconst WITH_STATS = true;\nexport default class DataStore {\n\n    constructor(table, { columns = [], sortCriteria = null, groupBy = null, filter = null }, updateQueue = new UpdateQueue()) {\n        this._table = table;\n        this._index_offset = DEFAULT_INDEX_OFFSET;\n        this._filter = filter;\n        this._groupState = null;\n        this._sortCriteria = sortCriteria;\n\n        this.columns = columns;\n\n        this._groupby = groupBy;\n        this._update_queue = updateQueue;\n\n        this.reset = this.reset.bind(this);\n        this.rowUpdated = this.rowUpdated.bind(this);\n        this.rowsUpdated = this.rowsUpdated.bind(this);\n        this.rowInserted = this.rowInserted.bind(this);\n\n        this.reset();\n\n        table.on('ready', this.reset);\n        table.on('rowUpdated', this.rowUpdated);\n        table.on('rowsUpdated', this.rowsUpdated);\n        table.on('rowInserted', this.rowInserted);\n\n    }\n\n\n    destroy() {\n        this._table.removeListener('rowUpdated', this.rowUpdated);\n        this._table.removeListener('rowInserted', this.rowInserted);\n        this._table = null;\n        this.rowSet = null;\n        this.filterRowSet = null;\n        this._update_queue = null;\n    }\n\n    get status() {\n        return this._table.status;\n    }\n\n    reset(){\n        const {_table: table, _groupby: groupBy, rowSet} = this;\n\n        let range = rowSet ? rowSet.range : null;\n\n        // TODO we should pass yarn build into the rowset as it will be needed for computed columns\n        this.rowSet = new RowSet(table, this.columns, this._index_offset);\n        // Is one filterRowset enough, or should we manage one for each column ?\n        this.filterRowSet = null;\n\n        // What if data is BOTH grouped and sorted ...\n        if (groupBy !== null) {\n            // more efficient to compute this directly from the table projection\n            this.rowSet = new GroupRowSet(this.rowSet, this.columns, this._groupby, this._groupState);\n        } else if (this._sortCriteria !== null) {\n            this.rowSet.sort(this._sortCriteria);\n        }\n\n        if (range){\n            const result = this.setRange(range, false);\n            console.log(result)\n            this._update_queue.replace(result);\n\n        }\n\n    }\n\n    rowInserted(event, idx, row) {\n        const { _update_queue, rowSet } = this;\n        const { size = null, replace, updates } = rowSet.insert(idx, row);\n        if (size !== null) {\n            _update_queue.resize(size);\n        }\n        if (replace) {\n            const { rows, size, offset } = rowSet.currentRange()\n            _update_queue.replace({rows, size, offset, filter: undefined, range:undefined});\n        } else if (updates) {\n            updates.forEach(update => {\n                _update_queue.update(update);\n            });\n\n        }\n        // what about offset change only ?\n    }\n\n    rowUpdated(event, idx, updates) {\n        const { rowSet, _update_queue } = this;\n        const result = rowSet.update(idx, updates);\n\n        if (result) {\n            if (rowSet instanceof RowSet) {\n                _update_queue.update(result);\n            } else {\n                result.forEach(rowUpdate => {\n                    _update_queue.update(rowUpdate);\n                });\n            }\n        }\n    }\n\n    rowsUpdated(event, updates, doNotPublish) {\n        const { rowSet, _update_queue } = this;\n        const results = [];\n        for (let i=0;i<updates.length; i++){\n            const [idx, ...updatedValues] = updates[i];\n            const result = rowSet.update(idx, updatedValues);\n            if (result) {\n                if (rowSet instanceof RowSet) {\n                    results.push(result);\n                } else {\n                    result.forEach(rowUpdate => {\n                        results.push(rowUpdate);\n                    });\n                }\n            }\n        }\n\n        if (results.length > 0 && doNotPublish !== true){\n            _update_queue.update(results);\n        }\n\n    }\n\n    getData(dataType) {\n        return dataType === DataTypes.ROW_DATA\n            ? this.rowSet\n            : dataType === DataTypes.FILTER_DATA\n                ? this.filterRowSet\n                : null;\n    }\n\n    setSubscribedColumns(columns) {\n        this.rowSet.setSubscribedColumns(columns);\n    }\n\n    //TODO we seem to get a setRange when we reverse sort order, is that correct ?\n    setRange(range, useDelta = true, dataType = DataTypes.ROW_DATA) {\n        return this.getData(dataType).setRange(range, useDelta);\n    }\n\n    select(idx, rangeSelect, keepExistingSelection, dataType=DataTypes.ROW_DATA){\n        const rowset = this.getData(dataType);\n        const updates = rowset.select(idx, rangeSelect, keepExistingSelection);\n        if (dataType === DataTypes.ROW_DATA){\n            return this.selectResponse(updates, dataType, rowset);\n        } else {\n            console.log(`[dataView] select on filterSet (range ${JSON.stringify(rowset.range)})`)\n            // we need to handle this case here, as the filter we construct depends on the selection details\n            // TODO we shouldn't be using the sortSet here, need an API method\n            const value = rowset.getSelectedValue(idx);\n            const isSelected = rowset.selected.rows.includes(idx);\n            const filter = {\n                type: isSelected ? IN : NOT_IN,\n                colName: rowset.columnName,\n                values: [value]\n            }\n            this.applyFilterSetChangeToFilter(filter);\n\n            if (updates.length > 0){\n                return {\n                    dataType,\n                    updates,\n                    stats: rowset.stats\n                }\n            }\n        }\n    }\n\n    selectAll(dataType=DataTypes.ROW_DATA){\n        const rowset = this.getData(dataType);\n        return this.selectResponse(rowset.selectAll(), dataType, rowset, true);\n    }\n\n    selectNone(dataType=DataTypes.ROW_DATA){\n        const rowset = this.getData(dataType);\n        return this.selectResponse(rowset.selectNone(), dataType, rowset, false);\n    }\n\n    // Handle response to a selecAll / selectNode operation. This may be operating on\n    // the entire resultset, or a filtered subset\n    selectResponse(updates, dataType, rowset, allSelected){\n        const updatesInViewport = updates.length > 0;\n        const {stats} = rowset;\n        if (dataType === DataTypes.ROW_DATA){\n            if (updatesInViewport){\n                return {updates};\n            }\n        } else {\n            const {totalRowCount, totalSelected} = stats;\n\n            // Maybe defer the filter operation ?\n            if (totalSelected === 0){\n                this.applyFilterSetChangeToFilter({colName: rowset.columnName, type: IN, values: []});\n            } else if (totalSelected === totalRowCount){\n                this.applyFilterSetChangeToFilter({colName: rowset.columnName, type: NOT_IN, values: []});\n            } else {\n                // we are not operating on the whole dataset, therefore it is a filtered subset\n                if (allSelected){\n                    this.applyFilterSetChangeToFilter({colName: rowset.columnName, type: IN, values: rowset.values});\n                } else {\n                    this.applyFilterSetChangeToFilter({colName: rowset.columnName, type: NOT_IN, values: rowset.values});\n                }\n            }\n\n            // always return, as the stats might be needed\n            // if (updatesInViewport){\n                return {\n                    dataType,\n                    updates,\n                    stats: rowset.stats\n                }\n            // }\n        }\n    }\n\n    sort(sortCriteria) {\n        this._sortCriteria = sortCriteria;\n        this.rowSet.sort(sortCriteria);\n        // assuming the only time we would not useDelta is when we want to reset ?\n        return this.setRange(resetRange(this.rowSet.range), false);\n    }\n\n    // filter may be called directly from client, in which case changes should be propagated, where\n    // appropriate, to any active filterSet(s). However, if the filterset has been changed, e.g. selection\n    // within a set, then filter applied here in consequence must not attempt to reset the same filterSet\n    // that originates the change.\n    filter(filter, dataType=\"rowData\", incremental=false, ignoreFilterRowset=false) {\n        if (dataType === DataTypes.FILTER_DATA){\n\n            return [undefined,this.filterFilterData(filter)];\n\n        } else {\n            if (incremental){\n                filter = addFilter(this._filter, filter);\n            }\n            const { rowSet, _filter, filterRowSet } = this;\n            const { range } = rowSet;\n            this._filter = filter;\n            let filterResultset;\n\n            if (filter === null && _filter) {\n                rowSet.clearFilter();\n            } else if (filter){\n                this.rowSet.filter(filter);\n            } else {\n                throw Error(`InMemoryView.filter setting null filter when we had no filter anyway`);\n            }\n\n            if (filterRowSet && dataType === DataTypes.ROW_DATA && !ignoreFilterRowset) {\n                if (filter){\n                    if (filterRowSet.type === DataTypes.FILTER_DATA){\n                        filterResultset = filterRowSet.setSelectedFromFilter(filter);\n                    } else if (filterRowSet.type === DataTypes.FILTER_BINS){\n                        this.filterRowSet = rowSet.getBinnedValuesForColumn({name:this.filterRowSet.columnName});\n                        filterResultset = this.filterRowSet.setRange();\n                    }\n                } else {\n                    // TODO examine this. Must be a more efficient way to reset counts in filterRowSet\n                    const {columnName, range} = filterRowSet;\n                    this.filterRowSet = rowSet.getDistinctValuesForColumn({name:columnName});\n                    filterResultset = this.filterRowSet.setRange(range, false);\n                }\n            }\n\n            const resultSet = {\n                ...(this.rowSet.setRange(resetRange(range), false)),\n                filter\n            }\n\n            return filterResultset\n                ? [resultSet, filterResultset]\n                : [resultSet];\n        }\n\n    }\n\n    //TODO merge with method above\n    filterFilterData(filter){\n        const {filterRowSet} = this;\n        if (filterRowSet){\n\n            if (filter === null) {\n                filterRowSet.clearFilter();\n            } else if (filter){\n                filterRowSet.filter(filter);\n            }\n\n            return filterRowSet.setRange(resetRange(filterRowSet.range), false, WITH_STATS);\n\n        } else {\n            console.error(`[InMemoryView] filterfilterRowSet no filterRowSet`)\n        }\n\n    }\n\n    applyFilterSetChangeToFilter(partialFilter){\n        const [result] = this.filter(partialFilter, DataTypes.ROW_DATA, true, true);\n        this._update_queue.replace(result);\n    }\n\n    applyFilter(){\n\n    }\n\n    groupBy(groupby) {\n        const { rowSet, columns, _groupState, _sortCriteria, _groupby } = this;\n        const { range: _range } = rowSet;\n        this._groupby = groupby;\n        if (groupby === null) {\n            this.rowSet = RowSet.fromGroupRowSet(this.rowSet);\n        } else {\n            if (_groupby === null) {\n                this.rowSet = new GroupRowSet(rowSet, columns, groupby, _groupState, _sortCriteria);\n            } else {\n                rowSet.groupBy(groupby);\n            }\n        }\n\n        return this.rowSet.setRange(resetRange(_range), false);\n    }\n\n    setGroupState(groupState) {\n        this._groupState = groupState;\n        const { rowSet } = this;\n        rowSet.setGroupState(groupState);\n\n        return rowSet.setRange(rowSet.range, false);\n    }\n\n    get updates() {\n        const { _update_queue, rowSet: { range } } = this;\n        let results = {\n            updates: _update_queue.popAll(),\n            range: {\n                lo: range.lo,\n                hi: range.hi\n            }\n        };\n        return results;\n    }\n\n    getFilterData(column, range) {\n        const { rowSet, filterRowSet, _filter: filter } = this;\n        // If our own dataset has been filtered by the column we want values for, we cannot use it, we have\n        // to go back to the source, using a filter which excludes the one in place on the target column.\n        const columnName = column.name;\n        const colDef = this.columns.find(col => col.name === columnName);\n        // No this should be decided beforehand (on client)\n        const type = getFilterType(colDef);\n\n        if (type === 'number') {\n            // // we need a notification from server to tell us when this is closed.\n            // we should assign to filterRowset\n            this.filterRowSet = rowSet.getBinnedValuesForColumn(column);\n\n        } else if (!filterRowSet || filterRowSet.columnName !== column.name) {\n            this.filterRowSet = rowSet.getDistinctValuesForColumn(column);\n\n        } else if (filterRowSet && filterRowSet.columnName === column.name) {\n            // if we already have the data for this filter, nothing further to do except reset the filterdata range\n            // so next request will return full dataset.\n            filterRowSet.setRange({ lo: 0, hi: 0 });\n        }\n        // If we already have a filterRowset for this column, but a filter on another column has changed, we need to\n        // recreate the filterRowset: SHould this happen when filter happens ?\n\n        if (filter) {\n            this.filterRowSet.setSelectedFromFilter(filter);\n        } else {\n            this.filterRowSet.selectAll();\n        }\n\n        // do we need to returtn searchText ? If so, it should\n        // be returned by the rowSet\n\n        // TODO wrap this, we use it  alot\n        return this.filterRowSet.setRange(range, false, WITH_STATS);\n\n\n    }\n\n}\n","import BaseTable from './table';\n\nexport default class Table extends BaseTable {\n\n    constructor({valueColumns, ...config}){\n      super(config);\n      this.valueColumns = valueColumns; // updateableFields ?\n    }\n\n    setData(data){\n      const {index} = this;\n      for (let i=0;i<data.length; i++){\n        const [idx, key] = data[i];\n        index[key] = idx;\n      }\n\n      this.rows = data;\n    }\n\n    async loadData(dataUrl){\n        console.log(`import data from ${dataUrl}.js`)\n        try {\n            const {default: data} = await import(`${dataUrl}`);\n            if (data) {\n                this.setData(data);\n            }\n        } catch(e){\n            console.error(`failed to load data from path '${dataUrl}'`, e)\n        }\n    }\n\n    // async installDataGenerators({createPath, updatePath}){\n    //     if (createPath){\n    //         const {default:createGenerator} = await import(`${createPath}.mjs`);\n    //         this.createRow = createGenerator;\n    //     }\n    //     if (updatePath){\n    //         const {default: updateGenerator} = await import(`${updatePath}.mjs`);\n    //         this.updateRow = updateGenerator;\n    //     }\n    // }\n\n}\n","import { createLogger, logColor } from '@heswell/utils/src/logging';\nimport {DataTypes, EventEmitter, uuid} from '@heswell/utils';\nimport DataStore from \"./data-store\";\nimport Table from \"./worker-table\";\n\nconst logger = createLogger('DataStoreConnection', logColor.brown);\n\nexport default async function connectDataStore(\n  connectionString,\n  callback,\n  connectionStatusCallback,\n) {\n  return makeConnection(connectionString, (msg) => {\n    const { type } = msg;\n    if (type === 'connection-status') {\n      connectionStatusCallback(msg);\n    } else {\n      callback(msg);\n    }\n  });\n}\n\nasync function makeConnection(url, callback, connection) {\n\n    callback({ type: 'connection-status', status: 'connecting' });\n    const dataStore = await createDataStore(url);\n\n    console.log(\n      `%c⚡ %c${url}`,\n      'font-size: 24px;color: green;font-weight: bold;',\n      'color:green; font-size: 14px;',\n    );\n\n    connection = new Connection(dataStore, url, callback);\n    const status = 'connected';\n    callback({ type: 'connection-status', status });\n    connection.status = status;\n    return connection;\n\n}\n\nconst createDataStore = async(url) => {\n  console.log(`table config url ${url}`);\n  const loadTableConfiguration = async () => await import(url);\n\n  const {config} = await loadTableConfiguration();\n  console.log(`got config ${JSON.stringify(config,null,2)}`);\n  const {generateData} = await import(config.dataUrl);\n  const table = new Table(config);\n  table.setData(generateData());\n  return new DataStore(table, {columns: config.columns}/*, updateQueue*/);\n\n  }\n\nclass Connection {\n  constructor(dataStore, url, callback) {\n    this.url = url;\n    this.connectionCallback = callback;\n    this.viewPortId = uuid();\n    this.setDataStore(dataStore);\n    this.status = 'ready';\n  }\n\n  setDataStore(dataStore) {\n    const {connectionCallback: callback, viewPortId} = this;\n\n\n    const send = ({requestId, body}) => {\n      console.log(`%c>>>  (DataStoreConnection)  ${JSON.stringify(body)}`,'color:blue;font-weight:bold;');\n      switch(body.type){\n        case \"CREATE_VP\":\n          const {columns, range, table} = body;\n          callback({requestId, body: { type: \"CREATE_VP_SUCCESS\", viewPortId, columns, range, table }});\n          const {rows, size: vpSize} = dataStore.setRange({lo: range.from, hi: range.to}, true);\n          const ts = +(new Date());\n          callback({\n            requestId: \"NA\",\n            body: {\n              type: \"TABLE_ROW\",\n              timeStamp: ts,\n              rows: [\n                {viewPortId, vpSize, rowIndex: -1, rowKey: \"SIZE\", updateType: \"SIZE\", sel:0, ts, data: []}\n              ].concat(rows.map(([rowIndex,,,,,,rowKey, sel, ...data]) => (\n                {viewPortId, vpSize, rowIndex, rowKey, updateType: \"U\", sel, ts, data }\n              )))\n            }\n          })\n          break;\n\n        case \"CHANGE_VP_RANGE\": {\n          const {from, to} = body;\n          callback({requestId, body: { type: \"CHANGE_VP_RANGE_SUCCESS\", viewPortId, from, to }});\n          const {rows, size: vpSize} = dataStore.setRange({lo: from, hi: to}, true);\n          const ts = +(new Date());\n          callback({\n            requestId: \"NA\",\n            body: {\n              type: \"TABLE_ROW\",\n              timeStamp: ts,\n              rows: [\n                {viewPortId, vpSize, rowIndex: -1, rowKey: \"SIZE\", updateType: \"SIZE\", sel:0, ts, data: []}\n              ].concat(rows.map(([rowIndex,,,,,,rowKey, sel, ...data]) => (\n                {viewPortId, vpSize, rowIndex, rowKey, updateType: \"U\", sel, ts, data }\n              )))\n            }\n          })\n\n        }\n\n          break;\n        default:\n          logger.log(`Unknown message type from client ${body.type}`)\n\n\n      }\n    };\n\n\n    this.send = send;\n\n    const warn = (msg) => {\n      logger.log(`Message cannot be sent, socket closed: ${msg.type}`);\n    };\n\n    this.close = () => {\n      console.log('[Connection] close websocket');\n      this.status = 'closed';\n      this.send = warn;\n    };\n  }\n}\n","const data = [];\n\nconst HB = /\"HB\"/;\nconst AUTH_SUCCESS = /\"AUTH_SUCCESS\"/\nconst LOGIN_SUCCESS = /\"LOGIN_SUCCESS\"/\nconst TABLE_LIST = /TABLE_LIST/\nconst TABLE_META = /TABLE_META/\n\nexport const saveTestData = (message, source) => {\n  // if (source === 'server' && (\n  //   HB.test(message) ||\n  //   AUTH_SUCCESS.test(message) ||\n  //   LOGIN_SUCCESS.test(message) ||\n  //   TABLE_LIST.test(message) ||\n  //   TABLE_META.test(message)\n  //   )) {\n  //   return;\n  // } else if (source === 'client') {\n  //   if (message.type.startsWith(\"GET_TABLE_\")){\n  //     return\n  //   }\n\n\n  //   message = JSON.stringify(message);\n  // }\n  // data.push(message);\n};\n\nexport const getTestMessages = () => {\n  const messages = data.slice();\n  data.length = 0;\n  return messages;\n};\n","export const AUTH = 'AUTH';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const CHANGE_VP = 'CHANGE_VP';\nexport const CHANGE_VP_SUCCESS = 'CHANGE_VP_SUCCESS';\nexport const CHANGE_VP_RANGE = 'CHANGE_VP_RANGE';\nexport const CHANGE_VP_RANGE_SUCCESS = 'CHANGE_VP_RANGE_SUCCESS';\nexport const CLOSE_TREE_NODE = \"CLOSE_TREE_NODE\";\nexport const CLOSE_TREE_SUCCESS = \"CLOSE_TREE_SUCCESS\";\nexport const CLOSE_TREE_REJECT = \"CLOSE_TREE_REJECT\";\nexport const CREATE_VISUAL_LINK = 'CREATE_VISUAL_LINK';\nexport const CREATE_VISUAL_LINK_SUCCESS = 'CREATE_VISUAL_LINK_SUCCESS';\nexport const CREATE_VP = 'CREATE_VP';\nexport const CREATE_VP_SUCCESS = 'CREATE_VP_SUCCESS';\nexport const DISABLE_VP = \"DISABLE_VP\";\nexport const DISABLE_VP_SUCCESS = \"DISABLE_VP_SUCCESS\";\nexport const DISABLE_VP_REJECT = \"DISABLE_VP_REJECT\";\nexport const ENABLE_VP = \"ENABLE_VP\";\nexport const ENABLE_VP_SUCCESS = \"ENABLE_VP_SUCCESS\";\nexport const ENABLE_VP_REJECT = \"ENABLE_VP_REJECT\";\nexport const GET_TABLE_LIST = \"GET_TABLE_LIST\";\nexport const GET_TABLE_META = \"GET_TABLE_META\";\nexport const GET_VP_VISUAL_LINKS = 'GET_VP_VISUAL_LINKS';\nexport const HB = \"HB\";\nexport const HB_RESP = \"HB_RESP\";\nexport const LOGIN = 'LOGIN';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const OPEN_TREE_NODE = \"OPEN_TREE_NODE\";\nexport const OPEN_TREE_SUCCESS = \"OPEN_TREE_SUCCESS\";\nexport const OPEN_TREE_REJECT = \"OPEN_TREE_REJECT\";\nexport const RPC_CALL = \"RPC_CALL\";\nexport const RPC_RESP = \"RPC_RESP\";\nexport const SET_SELECTION = 'SET_SELECTION';\nexport const SET_SELECTION_SUCCESS = 'SET_SELECTION_SUCCESS';\nexport const TABLE_META_RESP = 'TABLE_META_RESP';\nexport const TABLE_LIST_RESP = 'TABLE_LIST_RESP';\nexport const VP_VISUAL_LINKS_RESP = 'VP_VISUAL_LINKS_RESP';\n\nexport const TABLE_ROW = 'TABLE_ROW';\nexport const SIZE = 'SIZE'\nexport const UPDATE = 'U'\n","\nexport class KeySet {\n  constructor(range) {\n    this.keys = new Map();\n    this.free = [];\n    this.nextKeyValue = 0;\n    if (range){\n      const {lo, hi, from=lo, to=hi} = range;\n      this.reset({from, to});\n    }\n  }\n\n  next() {\n    if (this.free.length) {\n      return this.free.pop();\n    } else {\n      return this.nextKeyValue++;\n    }\n  }\n\n  reset({from, to}) {\n    this.keys.forEach((keyValue, rowIndex) => {\n      if (rowIndex < from || rowIndex >= to) {\n        this.free.push(keyValue);\n        this.keys.delete(rowIndex);\n      }\n    });\n\n    const size = to - from;\n    if (this.keys.size + this.free.length > size){\n      this.free.length = size - this.keys.size;\n    }\n\n    for (let rowIndex = from; rowIndex < to; rowIndex++) {\n      if (!this.keys.has(rowIndex)) {\n        const nextKeyValue = this.next();\n        this.keys.set(rowIndex, nextKeyValue);\n      }\n    }\n  }\n\n  keyFor(rowIndex) {\n    return this.keys.get(rowIndex)\n  }\n}\n","export const bufferBreakout = (range, from, to, bufferSize) => {\n  const bufferPerimeter = bufferSize * 0.25;\n  if (!range || !bufferSize){\n    return true;\n  } else if (range.to - to < bufferPerimeter) {\n    return true;\n  } else if (range.from > 0 && from - range.from < bufferPerimeter) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","import { WindowRange } from '@heswell/utils/src/range-utils';\nimport {bufferBreakout} from \"./buffer-range\";\nexport class ArrayBackedMovingWindow {\n  // Note, the buffer is already accounted for in the range passed in here\n  constructor({ lo, hi }, { from, to }, bufferSize) {\n    this.bufferSize = bufferSize;\n    this.clientRange = new WindowRange(lo, hi);\n    this.range = new WindowRange(from, to);\n    //internal data is always 0 based, we add range.from to determine an offset\n    this.internalData = new Array(bufferSize);\n    this.rowsWithinRange = 0;\n    this.rowCount = 0;\n  }\n\n  get hasAllRowsWithinRange() {\n    return (\n      this.rowsWithinRange === this.clientRange.to - this.clientRange.from ||\n      (this.rowCount > 0 && this.rowsWithinRange === this.rowCount)\n    );\n  }\n\n  setRowCount = (rowCount) => {\n    if (rowCount < this.internalData.length) {\n      this.internalData.length = rowCount;\n    }\n    if (rowCount < this.rowCount) {\n      // Brute force, works\n      this.rowsWithinRange = 0;\n      const end = Math.max(rowCount, this.clientRange.to);\n      for (let i = this.clientRange.from; i < end; i++) {\n        const rowIndex = i - this.range.from;\n        if (this.internalData[rowIndex] !== undefined) {\n          this.rowsWithinRange += 1;\n        }\n      }\n    }\n    this.rowCount = rowCount;\n  };\n\n  setAtIndex(index, data) {\n    //onsole.log(`ingest row at rowIndex ${index} [${index - this.range.from}]`)\n    const isWithinClientRange = this.isWithinClientRange(index);\n    if (isWithinClientRange || this.isWithinRange(index)) {\n      const internalIndex = index - this.range.from;\n      if (!this.internalData[internalIndex] && isWithinClientRange) {\n        this.rowsWithinRange += 1;\n        //onsole.log(`rowsWithinRange is now ${this.rowsWithinRange} out of ${this.range.to - this.range.from}`)\n      }\n      this.internalData[internalIndex] = data;\n    }\n    return isWithinClientRange;\n  }\n\n  getAtIndex(index) {\n    return this.range.isWithin(index) &&\n      this.internalData[index - this.range.from] != null\n      ? this.internalData[index - this.range.from]\n      : undefined;\n  }\n\n  isWithinRange(index) {\n    return this.range.isWithin(index);\n  }\n\n  isWithinClientRange(index) {\n    return this.clientRange.isWithin(index);\n  }\n\n  setClientRange(from, to) {\n    const originalRange = this.clientRange.copy();\n    this.clientRange.from = from;\n    this.clientRange.to = to;\n    this.rowsWithinRange = 0;\n    for (let i = from; i < to; i++) {\n      const internalIndex = i - this.range.from;\n      if (this.internalData[internalIndex]) {\n        this.rowsWithinRange += 1;\n      }\n    }\n\n    let clientRows = undefined;\n    let holdingRows = undefined;\n    const offset = this.range.from;\n\n    if (this.hasAllRowsWithinRange){\n      if (to > originalRange.to){\n        const start = Math.max(from, originalRange.to);\n        clientRows = this.internalData.slice(start-offset, to-offset);\n      } else {\n        const end = Math.min(originalRange.from, to);\n        clientRows = this.internalData.slice(from-offset, end-offset);\n      }\n    } else if (this.rowsWithinRange > 0){\n      if (to > originalRange.to){\n        const start = Math.max(from, originalRange.to);\n        holdingRows = this.internalData.slice(start-offset, to-offset).filter(row => !!row);\n      } else {\n        const end = Math.min(originalRange.from, to);\n        holdingRows = this.internalData.slice(Math.max(0,from-offset), end-offset).filter(row => !!row);\n      }\n    }\n\n    const serverDataRequired = bufferBreakout(this.range, from, to, this.bufferSize);\n    return [serverDataRequired, clientRows, holdingRows];\n  }\n\n  setRange(from, to) {\n    const [overlapFrom, overlapTo] = this.range.overlap(from, to);\n\n    const newData = new Array(to - from + this.bufferSize);\n    this.rowsWithinRange = 0;\n\n    for (let i = overlapFrom; i < overlapTo; i++) {\n      const data = this.getAtIndex(i);\n      if (data) {\n        const index = i - from;\n        newData[index] = data;\n        if (this.isWithinClientRange(i)) {\n          this.rowsWithinRange += 1;\n        }\n      }\n    }\n\n    this.internalData = newData;\n    this.range.from = from;\n    this.range.to = to;\n  }\n\n  getData() {\n    const { from, to } = this.range;\n    const { from: lo, to: hi } = this.clientRange;\n    const startOffset = Math.max(0, lo - from);\n    const endOffset = Math.min(to - from, to, hi - from, this.rowCount);\n    // const endOffset = Math.min(to-from, to, hi - from, this.rowCount);\n    //onsole.log(`MovingWindow getData (${lo}, ${hi}) range = ${from} ${to} , so start=${startOffset}, end=${endOffset}`)\n    return this.internalData.slice(startOffset, endOffset);\n  }\n}\n","import { metadataKeys } from '@heswell/utils/src/column-utils';\nimport { KeySet } from './keyset';\nimport * as Message from './messages';\nimport { ArrayBackedMovingWindow } from './array-backed-moving-window';\nimport { getFullRange } from '@heswell/utils/src/range-utils';\nimport { bufferBreakout } from \"./buffer-range\";\n\nconst { IDX, SELECTED } = metadataKeys;\nconst EMPTY_ARRAY = [];\n\nconst byRowIndex = ([index1],[index2]) => index1 - index2;\n\nexport class Viewport {\n  constructor({\n    viewport,\n    tablename,\n    columns,\n    range,\n    bufferSize = 0,\n    filter = '',\n    sort = [],\n    groupBy = [],\n    visualLink\n  }) {\n    this.clientViewportId = viewport;\n    this.table = tablename;\n    this.status = '';\n    this.disabled = false;\n    this.suspended = false;\n    this.columns = columns;\n    this.clientRange = range;\n    this.bufferSize = bufferSize;\n    this.sort = {\n      sortDefs: sort,\n    };\n    this.groupBy = groupBy;\n    this.filterSpec = {\n      filter,\n    };\n    this.isTree = false;\n    this.dataWindow = undefined;\n    this.rowCountChanged = false;\n    this.keys = new KeySet(range);\n    this.links = null;\n    this.linkedParent = null;\n    this.pendingLinkedParent = visualLink;\n    this.pendingOperations = new Map();\n    this.pendingRangeRequest = null;\n    this.hasUpdates = false;\n    this.holdingPen = [];\n  }\n\n  get hasUpdatesToProcess() {\n    if (this.suspended){\n      return false;\n    }\n    return this.rowCountChanged || this.hasUpdates;\n  }\n\n  subscribe() {\n    return {\n      type: Message.CREATE_VP,\n      table: this.table,\n      range: getFullRange(this.clientRange, this.bufferSize),\n      columns: this.columns,\n      sort: this.sort,\n      groupBy: this.groupBy,\n      filterSpec: this.filterSpec,\n    };\n  }\n\n  handleSubscribed({\n    viewPortId,\n    columns,\n    table,\n    range,\n    sort,\n    groupBy,\n    filterSpec,\n  }) {\n    this.serverViewportId = viewPortId;\n    this.status = 'subscribed';\n    this.columns = columns;\n    this.table = table;\n    this.range = range;\n    this.sort = sort;\n    this.groupBy = groupBy;\n    this.filterSpec = filterSpec;\n    this.isTree = groupBy && groupBy.length > 0;\n    this.dataWindow = new ArrayBackedMovingWindow(\n      this.clientRange,\n      range,\n      this.bufferSize,\n    );\n\n    console.log(\n      `%cViewport subscribed\n        clientVpId: ${this.clientViewportId}\n        serverVpId: ${this.serverViewportId}\n        table: ${this.table}\n        columns: ${columns.join(',')}\n        range: ${JSON.stringify(range)}\n        sort: ${JSON.stringify(sort)}\n        groupBy: ${JSON.stringify(groupBy)}\n        filterSpec: ${JSON.stringify(filterSpec)}\n        bufferSize: ${this.bufferSize}\n      `,\n      'color: blue',\n    );\n\n    return {\n      type: 'subscribed',\n      columns\n    }\n  }\n\n  awaitOperation(requestId, type) {\n    //TODO set uip a timeout mechanism here\n    this.pendingOperations.set(requestId, type);\n  }\n\n  // Return a message if we need to communicate this to client UI\n  completeOperation(requestId, ...params) {\n    const { clientViewportId, pendingOperations } = this;\n    const { type, data } = pendingOperations.get(requestId);\n    pendingOperations.delete(requestId);\n    if (type === Message.CHANGE_VP_RANGE) {\n      const [from, to] = params;\n      this.dataWindow.setRange(from, to);\n      //this.hasUpdates = true; // is this right ??????????\n      this.pendingRangeRequest = null;\n    } else if (type === 'groupBy') {\n      this.isTree = true;\n      this.groupBy = data;\n      return { clientViewportId, type, groupBy: data };\n    } else if (type === 'groupByClear') {\n      this.isTree = false;\n      this.groupBy = [];\n      return { clientViewportId, type: 'groupBy', groupBy: null };\n    } else if (type === 'filter') {\n      this.filterSpec = { filter: data };\n      return { clientViewportId, type, filter: data };\n    } else if (type === 'sort') {\n      this.sort = { sortDefs: data };\n      return { clientViewportId, type, sort: data };\n    } else if (type === 'selection') {\n      this.selection = data;\n    } else if (type === 'disable') {\n      this.disabled = true; // assuming its _SUCCESS, of cource\n    } else if (type === 'enable') {\n      this.disabled = false;\n    } else if (type === Message.CREATE_VISUAL_LINK){\n      const [colName, parentViewportId, parentColName] = params;\n      this.linkedParent = {\n        colName,\n        parentViewportId,\n        parentColName\n      };\n      this.pendingLinkedParent = null;\n      return {\n        type: 'visual-link-created',\n        clientViewportId,\n        colName,\n        parentViewportId,\n        parentColName\n      }\n    }\n  }\n\n  rangeRequest(requestId, from, to) {\n    // If we can satisfy the range request from the buffer, we will.\n    // May or may not need to make a server request, depending on status of buffer\n    const type = Message.CHANGE_VP_RANGE;\n    // If dataWindow has all data for the new range, it will return the\n    // delta of rows which are in the new range but were not in the\n    // previous range.\n    // Note: what if it doesn't have the entire range but DOES have all\n    // rows that constitute the delta ? Is this even possible ?\n    const [\n      serverDataRequired , clientRows, holdingRows\n    ] = this.dataWindow.setClientRange(from, to);\n    const serverRequest = serverDataRequired &&\n      bufferBreakout(this.pendingRangeRequest, from, to, this.bufferSize)\n      ? {\n          type,\n          viewPortId: this.serverViewportId,\n          ...getFullRange(\n            { lo: from, hi: to },\n            this.bufferSize,\n            this.dataWindow.rowCount,\n          ),\n        }\n      : undefined;\n    if (serverRequest) {\n      // TODO check that there os not already a pending server request for more data\n      this.awaitOperation(requestId, { type });\n      this.pendingRangeRequest = serverRequest;\n    }\n\n    // always reset the keys here, even if we're not going to return rows immediately.\n    this.keys.reset(this.dataWindow.clientRange);\n\n    if (this.holdingPen.some(([index]) => index < from || index >= to)){\n      this.holdingPen = this.holdingPen.filter(([index]) => index >= from && index < to);\n    }\n\n    const toClient = this.isTree ? toClientRowTree(this.groupBy, this.columns) : toClientRow;\n\n    if (holdingRows){\n      holdingRows.forEach(row => {\n        this.holdingPen.push(toClient(row, this.keys))\n      })\n    }\n\n    if (clientRows){\n      return [serverRequest, clientRows.map(row => toClient(row, this.keys))];\n    } else {\n      return [serverRequest]\n    }\n  }\n\n  setLinks(links){\n    this.links = links;\n    return [{\n      type: \"VP_VISUAL_LINKS_RESP\",\n      links,\n      clientViewportId: this.clientViewportId\n     }, this.pendingLinkedParent]\n  }\n\n  createLink(requestId, colName, parentVpId,  parentColumnName) {\n    const message = {\n      type: Message.CREATE_VISUAL_LINK,\n      parentVpId,\n      childVpId: this.serverViewportId,\n      parentColumnName,\n      childColumnName: colName,\n    }\n    this.awaitOperation(requestId, message);\n    return message;\n  }\n\n  suspend(){\n    this.suspended = true;\n  }\n\n  resume(){\n    const records = this.dataWindow.getData();\n    const { keys } = this;\n    const toClient = this.isTree ? toClientRowTree(this.groupBy, this.columns) : toClientRow;\n    const out = [];\n    for (let row of records) {\n      if (row) {\n        out.push(toClient(row, keys));\n      }\n    }\n    return out;\n}\n\n  enable(requestId) {\n    this.awaitOperation(requestId, { type: 'enable' });\n    return {\n      type: Message.ENABLE_VP,\n      viewPortId: this.serverViewportId,\n    };\n  }\n\n  disable(requestId) {\n    this.awaitOperation(requestId, { type: 'disable' });\n    return {\n      type: Message.DISABLE_VP,\n      viewPortId: this.serverViewportId,\n    };\n  }\n\n  filterRequest(requestId, filter) {\n    this.awaitOperation(requestId, { type: 'filter', data: filter });\n    return this.createRequest({ filterSpec: { filter } });\n  }\n\n  sortRequest(requestId, sortDefs) {\n    this.awaitOperation(requestId, { type: 'sort', data: sortDefs });\n    return this.createRequest({ sort: { sortDefs } });\n  }\n\n  groupByRequest(requestId, groupBy = EMPTY_ARRAY) {\n    const type = groupBy === EMPTY_ARRAY ? 'groupByClear' : 'groupBy';\n    this.awaitOperation(requestId, { type, data: groupBy });\n    return this.createRequest({ groupBy });\n  }\n\n  selectRequest(requestId, row, rangeSelect, keepExistingSelection) {\n    const singleSelect = !rangeSelect && !keepExistingSelection;\n    const selection = row[SELECTED]\n      ? singleSelect\n        ? []\n        : this.selection.filter((idx) => idx !== row[IDX])\n      : keepExistingSelection\n      ? this.selection.concat(row[IDX])\n      : [row[IDX]];\n\n    this.awaitOperation(requestId, { type: 'selection', data: selection });\n    return {\n      type: Message.SET_SELECTION,\n      vpId: this.serverViewportId,\n      selection,\n    };\n  }\n\n  handleUpdate(updateType, rowIndex, row) {\n    if (this.dataWindow.rowCount !== row.vpSize) {\n      this.dataWindow.setRowCount(row.vpSize);\n      this.rowCountChanged = true;\n    }\n    if (updateType === 'U') {\n      // Update will return true if row was within client range\n      if (this.dataWindow.setAtIndex(rowIndex, row)) {\n        this.hasUpdates = true;\n      }\n    }\n  }\n\n  getNewRowCount = () => {\n    if (this.rowCountChanged) {\n      this.rowCountChanged = false;\n      return this.dataWindow.rowCount;\n    }\n  };\n\n  // This is called only after new data has been received from server - data\n  // returned direcly from buffer does not use this.\n  // If we have updates, but we don't yet have data for the full client range\n  // in our buffer, store them in the holding pen. We know the remaining rows\n  // have been requested and will arrive imminently. Soon as we receive data,\n  // contents of holding pen plus additional rows received that fill the range\n  // will be dispatched to client.\n  // If we have any rows in the holding pen, and we now have a full set of\n  // client data, make sure we empty the pen and send those rows to client,\n  // along qith the new data.\n  // TODO what if we're going backwards\n  getClientRows(timeStamp) {\n    if (this.hasUpdates) {\n      const records = this.dataWindow.getData();\n      const { keys } = this;\n      const toClient = this.isTree ? toClientRowTree(this.groupBy, this.columns) : toClientRow;\n\n      const clientRows = this.dataWindow.hasAllRowsWithinRange\n        ? this.holdingPen.splice(0) : undefined;\n\n      const out = clientRows || this.holdingPen;\n\n      for (let row of records) {\n        if (row && row.ts >= timeStamp) {\n          out.push(toClient(row, keys));\n        }\n      }\n      this.hasUpdates = false;\n\n      // this only matters where we scroll backwards and have holdingPen data\n      // should we test for that explicitly ?\n      return clientRows && clientRows.sort(byRowIndex);\n    }\n  }\n\n  createRequest(params) {\n    return {\n      type: Message.CHANGE_VP,\n      viewPortId: this.serverViewportId,\n      columns: this.columns,\n      sort: this.sort,\n      groupBy: this.groupBy,\n      filterSpec: this.filterSpec,\n      ...params,\n    };\n  }\n}\n\nconst toClientRow = ({ rowIndex, rowKey, sel: isSelected, data }, keys) =>\n  [\n    rowIndex,\n    keys.keyFor(rowIndex),\n    true,\n    null,\n    null,\n    1,\n    rowKey,\n    isSelected,\n  ].concat(data);\n\nconst toClientRowTree = (groupBy, columns) => ({ rowIndex, rowKey, sel: isSelected, data }, keys) => {\n  let [depth, isExpanded, path, isLeaf, label, count, ...rest] = data;\n  const steps = rowKey.split('/').slice(1);\n\n  groupBy.forEach((col,i) => {\n    const idx = columns.indexOf(col);\n    rest[idx] = steps[i]\n  })\n\n  const record = [\n    rowIndex,\n    keys.keyFor(rowIndex),\n    isLeaf,\n    isExpanded,\n    depth,\n    count,\n    rowKey,\n    isSelected,\n  ].concat(rest);\n\n  return record;\n};\n","export const getRpcService = method => [\"OrderEntryRpcHandler\", \"SIMUL\"];\n","import * as Message from './messages';\nimport { Viewport } from './new-viewport';\nimport { getRpcService } from \"./rpc-services\";\n\n// TEST_DATA_COLLECTION\n// import { saveTestData } from '../../test-data-collection';\n\nlet _requestId = 1;\nexport const TEST_setRequestId = (id) => (_requestId = id);\n\nconst nextRequestId = () => `${_requestId++}`;\nconst EMPTY_ARRAY = [];\nexport class ServerProxy {\n  constructor(connection, callback) {\n    this.connection = connection;\n    this.postMessageToClient = callback;\n    this.viewports = new Map();\n    this.mapClientToServerViewport = new Map();\n    this.currentTimestamp = undefined;\n  }\n\n  async authenticate(username, password) {\n    return new Promise((resolve, reject) => {\n      this.sendMessageToServer({ type: Message.AUTH, username, password }, '');\n      this.pendingAuthentication = { resolve, reject };\n    });\n  }\n\n  async login() {\n    return new Promise((resolve, reject) => {\n      this.sendMessageToServer(\n        { type: Message.LOGIN, token: this.loginToken, user: 'user' },\n        '',\n      );\n      this.pendingLogin = { resolve, reject };\n    });\n  }\n\n  subscribe(message) {\n    // guard against subscribe message when a viewport is already subscribed\n    if (!this.mapClientToServerViewport.has(message.viewport)) {\n      const viewport = new Viewport(message);\n      this.viewports.set(message.viewport, viewport);\n      // use client side viewport as request id, so that when we process the response,\n      // with the serverside viewport we can establish a mapping between the two\n      const isReady = this.sessionId !== '';\n      this.sendIfReady(viewport.subscribe(), message.viewport, isReady);\n    }\n\n  }\n\n  handleMessageFromClient(message) {\n    const { type, viewport: clientViewportId } = message;\n    const serverViewportId = this.mapClientToServerViewport.get(\n      clientViewportId,\n    );\n\n    // TEST DATA COLLECTION\n    // saveTestData(message, 'client');\n    //---------------------\n    const viewport = this.viewports.get(serverViewportId);\n    if (!viewport) {\n      switch (type) {\n        case Message.GET_TABLE_LIST:\n          this.sendMessageToServer({ type }, message.requestId);\n          break;\n        case Message.GET_TABLE_META:\n          this.sendMessageToServer(\n            { type, table: message.table },\n            message.requestId,\n          );\n          break;\n        default:\n      }\n      return;\n    }\n    const isReady = viewport.status === 'subscribed';\n\n    switch (message.type) {\n      case 'setViewRange':\n        const requestId = nextRequestId();\n        const [serverRequest, rows] = viewport.rangeRequest(\n          requestId,\n          message.range.lo,\n          message.range.hi,\n        );\n        if (serverRequest) {\n          this.sendIfReady(serverRequest, requestId, isReady);\n        }\n        if (rows) {\n          const clientMessage = {\n            type: 'viewport-updates',\n            viewports: {\n              [viewport.clientViewportId]: { rows },\n            },\n          };\n          this.postMessageToClient(clientMessage);\n        }\n        break;\n\n      case 'sort':\n        {\n          const requestId = nextRequestId();\n          const request = viewport.sortRequest(requestId, message.sortCriteria);\n          this.sendIfReady(request, requestId, isReady);\n        }\n        break;\n\n      case 'groupBy':\n        {\n          const requestId = nextRequestId();\n          const request = viewport.groupByRequest(requestId, message.groupBy);\n          this.sendIfReady(request, requestId, isReady);\n        }\n        break;\n\n      case 'filterQuery':\n        {\n          const requestId = nextRequestId();\n          const request = viewport.filterRequest(requestId, message.filter);\n          this.sendIfReady(request, requestId, isReady);\n        }\n        break;\n\n      case 'select':\n        {\n          const requestId = nextRequestId();\n          const { row, rangeSelect, keepExistingSelection } = message;\n          const request = viewport.selectRequest(\n            requestId,\n            row,\n            rangeSelect,\n            keepExistingSelection,\n          );\n          this.sendIfReady(request, requestId, isReady);\n        }\n        break;\n\n      case 'suspend':\n        viewport.suspend();\n        break\n\n      case 'resume': {\n        const rows = viewport.resume();\n        const clientMessage = {\n          type: 'viewport-updates',\n          viewports: {\n            [viewport.clientViewportId]: { rows },\n          },\n        };\n        this.postMessageToClient(clientMessage);\n\n      }\n        break\n      case 'disable':\n        {\n          console.log(`%cDISABLE`, 'color:red;font-weight: bold;')\n          const requestId = nextRequestId();\n          const request = viewport.disable(requestId);\n          this.sendIfReady(request, requestId, isReady);\n        }\n        break;\n\n      case 'enable':\n        {\n          const requestId = nextRequestId();\n          const request = viewport.enable(requestId);\n          this.sendIfReady(request, requestId, isReady);\n        }\n        break;\n\n      case 'openTreeNode':\n        this.sendIfReady(\n          {\n            type: Message.OPEN_TREE_NODE,\n            vpId: viewport.serverViewportId,\n            treeKey: message.key,\n          },\n          _requestId++,\n          isReady,\n        );\n        break;\n\n      case 'closeTreeNode':\n        this.sendIfReady(\n          {\n            type: Message.CLOSE_TREE_NODE,\n            vpId: viewport.serverViewportId,\n            treeKey: message.key,\n          },\n          _requestId++,\n          isReady,\n        );\n\n        break;\n\n      case 'createLink':\n        {\n          const {\n            parentVpId,\n            parentColumnName,\n            childColumnName,\n            viewport: clientViewportId\n          } = message;\n\n          const serverViewportId = this.mapClientToServerViewport.get(clientViewportId);\n          const viewport = this.viewports.get(serverViewportId)\n          const requestId = nextRequestId();\n          const request = viewport.createLink(\n            requestId,\n            childColumnName,\n            parentVpId,\n            parentColumnName\n          );\n\n          this.sendMessageToServer(request, requestId);\n\n        }\n        break;\n\n      case Message.RPC_CALL: {\n        const { method } = message;\n        const [service, module] = getRpcService(method);\n        this.sendMessageToServer(\n          {\n            type,\n            service,\n            method: message.method,\n            params: [viewport.serverViewportId],\n            namedParams: {}\n          },\n          message.requestId,\n          module\n        );\n      }\n\n        break;\n\n      default:\n        console.log(\n          `Vuu ServerProxy Unexpected message from client ${JSON.stringify(\n            message,\n          )}`,\n        );\n    }\n  }\n\n  sendIfReady(message, requestId, isReady = true) {\n    // TODO implement the message queuing in remote data view\n    if (isReady) {\n      this.sendMessageToServer(message, requestId);\n    } else {\n      // TODO need to make sure we keep the requestId\n      this.queuedRequests.push(message);\n    }\n    return isReady;\n  }\n\n  sendMessageToServer(body, requestId = _requestId++, module = \"CORE\") {\n    // const { clientId } = this.connection;\n    this.connection.send({\n      requestId,\n      sessionId: this.sessionId,\n      token: this.loginToken,\n      user: 'user',\n      module,\n      body,\n    });\n  }\n\n  handleMessageFromServer(message) {\n    const {\n      requestId,\n      body: { type, timeStamp, ...body },\n    } = message;\n    const { viewports } = this;\n    switch (type) {\n      case Message.HB:\n        this.sendMessageToServer(\n          { type: Message.HB_RESP, ts: +new Date() },\n          'NA',\n        );\n        break;\n\n      case Message.AUTH_SUCCESS:\n        this.loginToken = message.token;\n        this.pendingAuthentication.resolve(message.token);\n        break;\n\n      case Message.LOGIN_SUCCESS:\n        this.sessionId = message.sessionId;\n        this.pendingLogin.resolve(message.sessionId);\n        break;\n\n      case Message.CREATE_VP_SUCCESS:\n        // The clientViewportId was used as requestId for CREATE_VPmessage\n        if (viewports.has(requestId)) {\n          const viewport = viewports.get(requestId);\n          const { viewPortId: serverViewportId } = body;\n          viewports.set(serverViewportId, viewport);\n          viewports.delete(requestId);\n          this.mapClientToServerViewport.set(requestId, serverViewportId);\n          const response = viewport.handleSubscribed(body);\n          if (response) {\n            this.postMessageToClient(response);\n          }\n          this.sendMessageToServer({\n            type: Message.GET_VP_VISUAL_LINKS,\n            vpId: serverViewportId\n          }, nextRequestId());\n\n\n        }\n        break;\n      case Message.SET_SELECTION_SUCCESS:\n        if (viewports.has(body.vpId)) {\n          viewports.get(body.vpId).completeOperation(requestId);\n        }\n        break;\n\n      case Message.CHANGE_VP_SUCCESS:\n      case Message.DISABLE_VP_SUCCESS:\n      case Message.ENABLE_VP_SUCCESS:\n        if (viewports.has(body.viewPortId)) {\n          const response = this.viewports\n            .get(body.viewPortId)\n            .completeOperation(requestId);\n          if (response) {\n            this.postMessageToClient(response);\n          }\n        }\n\n        break;\n\n      case Message.TABLE_ROW:\n        const [{ ts: firstBatchTimestamp } = { ts: timeStamp }] =\n          body.rows || EMPTY_ARRAY;\n        // console.log(`\\nbatch timestamp ${time(timeStamp)} first timestamp ${time(firstBatchTimestamp)} ${body.rows.length} rows in batch`)\n        for (const row of body.rows) {\n          const { viewPortId, rowIndex, rowKey, updateType } = row;\n          const viewport = viewports.get(viewPortId);\n          // console.log(`row timestamp ${time(row.ts)}`)\n          if (\n            viewport.isTree &&\n            updateType === 'U' &&\n            !rowKey.startsWith('$root')\n          ) {\n            // console.log('Ignore blank rows sent after GroupBy')\n          } else {\n            viewport.handleUpdate(updateType, rowIndex, row);\n          }\n        }\n        this.processUpdates(firstBatchTimestamp);\n        break;\n\n      case Message.CHANGE_VP_RANGE_SUCCESS:\n        {\n          const { viewPortId, from, to } = body;\n          viewports.get(viewPortId).completeOperation(requestId, from, to);\n        }\n        break;\n\n      case Message.OPEN_TREE_SUCCESS:\n      case Message.CLOSE_TREE_SUCCESS:\n\n        break;\n\n      case Message.CREATE_VISUAL_LINK_SUCCESS: {\n        const { childVpId, childColumnName, parentVpId, parentColumnName } = body;\n        const { clientViewportId: parentViewportId } = this.viewports.get(parentVpId);\n        const response = this.viewports.get(childVpId).completeOperation(\n          requestId,\n          childColumnName,\n          parentViewportId,\n          parentColumnName\n        );\n        if (response) {\n          this.postMessageToClient(response)\n        }\n      }\n        break;\n\n      case Message.TABLE_LIST_RESP:\n        this.postMessageToClient({ type, tables: body.tables, requestId });\n        break;\n\n      case Message.TABLE_META_RESP:\n        this.postMessageToClient({\n          type,\n          table: body.table,\n          columns: body.columns,\n          requestId,\n        });\n        break;\n\n      case Message.VP_VISUAL_LINKS_RESP: {\n        const links = this.getActiveLinks(body.links);\n        if (links.length) {\n          const viewport = this.viewports.get(body.vpId);\n          const [clientMessage, pendingLink] = viewport.setLinks(links);\n          this.postMessageToClient(clientMessage);\n          if (pendingLink) {\n            console.log({ pendingLink });\n            const { colName, parentViewportId, parentColName } = pendingLink;\n            const requestId = nextRequestId();\n            const serverViewportId = this.mapClientToServerViewport.get(parentViewportId);\n            const message = viewport.createLink(requestId, colName, serverViewportId, parentColName);\n            this.sendMessageToServer(message, requestId);\n          }\n        }\n      }\n        break;\n\n      case Message.RPC_RESP: {\n        const { method, result } = body;\n        // check to see if the orderEntry is already open on the page\n        let orderEntryOpen = false;\n        for (let viewport of this.viewports.values()) {\n          if (!viewport.suspended && viewport.table === 'orderEntry') {\n            orderEntryOpen = true;\n            break;\n          }\n        }\n        this.postMessageToClient({ type, method, result, orderEntryOpen, requestId })\n      }\n        break;\n\n      case \"ERROR\":\n        console.error(body.msg)\n        break;\n\n      default:\n        console.log(`handleMessageFromServer,${body.type}.`);\n    }\n  }\n\n  // Eliminate links to suspended viewports\n  getActiveLinks(links) {\n    return links.filter(link => {\n      const viewport = this.viewports.get(link.parentVpId);\n      return viewport && !viewport.suspended;\n    })\n  }\n\n\n  processUpdates(timeStamp) {\n    let clientMessage;\n    this.viewports.forEach((viewport) => {\n      if (viewport.hasUpdatesToProcess) {\n        const rows = viewport.getClientRows(timeStamp);\n        const size = viewport.getNewRowCount();\n        if (size !== undefined || rows) {\n          clientMessage = clientMessage || {\n            type: 'viewport-updates',\n            viewports: {},\n          };\n          clientMessage.viewports[viewport.clientViewportId] = { rows, size };\n        }\n      }\n      if (clientMessage) {\n        // const now = performance.now();\n        // if (updateTime){\n        //   onsole.log(`time between updates ${now - updateTime}`)\n        // }\n        // updateTime = now;\n        this.postMessageToClient(clientMessage);\n      }\n    });\n  }\n}\n\nconst time = (ts) => {\n  const date = new Date(ts);\n  return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} ${date.getMilliseconds()}`;\n};\n","import connectWebsocket from '@vuu-ui/data-remote/src/remote-websocket-connection';\nimport connectDataStore from '@heswell/data-store/src/data-store-connection';\n// TEST DATA COLLECTION\nimport { getTestMessages } from '@vuu-ui/data-remote/src/test-data-collection';\nimport { ServerProxy } from '@vuu-ui/data-remote/src/servers/vuu/new-server-proxy';\nimport { createLogger, logColor } from '@heswell/utils/src/logging';\n\nconst logger = createLogger('Worker', logColor.brown);\n\nlet server;\n\nasync function connectToServer(url,useWebsocket) {\n  const makeConnection = useWebsocket ? connectWebsocket : connectDataStore;\n  const connection = await makeConnection(\n    url,\n    // if this was called during connect, we would get a ReferenceError, but it will\n    // never be called until subscriptions have been made, so this is safe.\n    (msg) => server.handleMessageFromServer(msg),\n    (msg) => logger.log(JSON.stringify(msg)),\n    // msg => {\n    //   onConnectionStatusMessage(msg);\n    //   if (msg.status === 'disconnected'){\n    //     server.disconnected();\n    //   } else if (msg.status === 'reconnected'){\n    //     server.resubscribeAll();\n    //   }\n    // }\n  );\n  server = new ServerProxy(connection, (msg) => sendMessageToClient(msg));\n  // TODO handle authentication, login\n  if (connection.requiresAuthentication) {\n    await server.authenticate('steve', 'pword');\n  }\n  if (connection.requiresLogin) {\n    await server.login();\n  }\n}\n\nlet lastTime = 0;\nconst timings = [];\n\nfunction sendMessageToClient(message){\n  const now = Math.round(performance.now());\n  if (lastTime){\n    timings.push(now-lastTime)\n\n    // if (timings.length % 100 === 0){\n    //   console.log(timings.join(', : '))\n    //   timings.length = 0;\n    // }\n  }\n  postMessage(message);\n  lastTime= now;\n}\n\nconst handleMessageFromClient = async ({ data: message }) => {\n  switch (message.type) {\n    case 'connect':\n      await connectToServer(message.url, message.useWebsocket);\n      postMessage({ type: 'connected' });\n      break;\n    case 'subscribe':\n      server.subscribe(message);\n      break;\n    case 'unsubscribe':\n      server.unsubscribe(message.viewport);\n      break;\n    // TEST DATA COLLECTION\n    case 'send-websocket-data':\n      postMessage({ type: 'websocket-data', data: getTestMessages() });\n      break;\n    default:\n      server.handleMessageFromClient(message);\n  }\n};\n\n/* eslint-disable-next-line no-restricted-globals */\nself.addEventListener('message', handleMessageFromClient);\n\npostMessage({ type: 'ready' });\n"],"names":["logger","makeConnection","Connection","bisect","Table","byKey","EMPTY","d3.histogram","filterPredicate","EMPTY_ARRAY","BaseTable","Message.CREATE_VP","Message.CHANGE_VP_RANGE","Message.CREATE_VISUAL_LINK","Message.ENABLE_VP","Message.DISABLE_VP","Message.SET_SELECTION","Message.CHANGE_VP","Message.AUTH","Message.LOGIN","Message.GET_TABLE_LIST","Message.GET_TABLE_META","Message.OPEN_TREE_NODE","Message.CLOSE_TREE_NODE","Message.RPC_CALL","Message.HB","Message.HB_RESP","Message.AUTH_SUCCESS","Message.LOGIN_SUCCESS","Message.CREATE_VP_SUCCESS","Message.GET_VP_VISUAL_LINKS","Message.SET_SELECTION_SUCCESS","Message.CHANGE_VP_SUCCESS","Message.DISABLE_VP_SUCCESS","Message.ENABLE_VP_SUCCESS","Message.TABLE_ROW","Message.CHANGE_VP_RANGE_SUCCESS","Message.OPEN_TREE_SUCCESS","Message.CLOSE_TREE_SUCCESS","Message.CREATE_VISUAL_LINK_SUCCESS","Message.TABLE_LIST_RESP","Message.TABLE_META_RESP","Message.VP_VISUAL_LINKS_RESP","Message.RPC_RESP","connectWebsocket"],"mappings":"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"}