// Generated from ./src/grammars/Filter.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class FilterLexer extends Lexer {
	public static readonly TRUE = 1;
	public static readonly FALSE = 2;
	public static readonly AND = 3;
	public static readonly OR = 4;
	public static readonly LT = 5;
	public static readonly GT = 6;
	public static readonly EQ = 7;
	public static readonly NEQ = 8;
	public static readonly IN = 9;
	public static readonly STARTS = 10;
	public static readonly ENDS = 11;
	public static readonly PATHSEP = 12;
	public static readonly LBRACK = 13;
	public static readonly RBRACK = 14;
	public static readonly LPAREN = 15;
	public static readonly RPAREN = 16;
	public static readonly COMMA = 17;
	public static readonly INT = 18;
	public static readonly FLOAT = 19;
	public static readonly STRING = 20;
	public static readonly ID = 21;
	public static readonly WS = 22;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"TRUE", "FALSE", "AND", "OR", "LT", "GT", "EQ", "NEQ", "IN", "STARTS", 
		"ENDS", "PATHSEP", "LBRACK", "RBRACK", "LPAREN", "RPAREN", "COMMA", "INT", 
		"FLOAT", "STRING", "ID", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'true'", "'false'", "'and'", "'or'", "'<'", "'>'", "'='", 
		"'!='", "'in'", "'starts'", "'ends'", "'/'", "'['", "']'", "'('", "')'", 
		"','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "TRUE", "FALSE", "AND", "OR", "LT", "GT", "EQ", "NEQ", "IN", 
		"STARTS", "ENDS", "PATHSEP", "LBRACK", "RBRACK", "LPAREN", "RPAREN", "COMMA", 
		"INT", "FLOAT", "STRING", "ID", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(FilterLexer._LITERAL_NAMES, FilterLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return FilterLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(FilterLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Filter.g4"; }

	// @Override
	public get ruleNames(): string[] { return FilterLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return FilterLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return FilterLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return FilterLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x18\x8D\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x06\x13g\n\x13\r\x13\x0E" +
		"\x13h\x03\x14\x06\x14l\n\x14\r\x14\x0E\x14m\x03\x14\x03\x14\x07\x14r\n" +
		"\x14\f\x14\x0E\x14u\v\x14\x03\x15\x03\x15\x07\x15y\n\x15\f\x15\x0E\x15" +
		"|\v\x15\x03\x15\x03\x15\x03\x16\x03\x16\x07\x16\x82\n\x16\f\x16\x0E\x16" +
		"\x85\v\x16\x03\x17\x06\x17\x88\n\x17\r\x17\x0E\x17\x89\x03\x17\x03\x17" +
		"\x02\x02\x02\x18\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07" +
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E" +
		"\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02" +
		"\x15)\x02\x16+\x02\x17-\x02\x18\x03\x02\x06\x06\x02/02;C\\c|\x05\x02C" +
		"\\aac|\x07\x02/02;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\x92\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x03/\x03" +
		"\x02\x02\x02\x054\x03\x02\x02\x02\x07:\x03\x02\x02\x02\t>\x03\x02\x02" +
		"\x02\vA\x03\x02\x02\x02\rC\x03\x02\x02\x02\x0FE\x03\x02\x02\x02\x11G\x03" +
		"\x02\x02\x02\x13J\x03\x02\x02\x02\x15M\x03\x02\x02\x02\x17T\x03\x02\x02" +
		"\x02\x19Y\x03\x02\x02\x02\x1B[\x03\x02\x02\x02\x1D]\x03\x02\x02\x02\x1F" +
		"_\x03\x02\x02\x02!a\x03\x02\x02\x02#c\x03\x02\x02\x02%f\x03\x02\x02\x02" +
		"\'k\x03\x02\x02\x02)v\x03\x02\x02\x02+\x7F\x03\x02\x02\x02-\x87\x03\x02" +
		"\x02\x02/0\x07v\x02\x0201\x07t\x02\x0212\x07w\x02\x0223\x07g\x02\x023" +
		"\x04\x03\x02\x02\x0245\x07h\x02\x0256\x07c\x02\x0267\x07n\x02\x0278\x07" +
		"u\x02\x0289\x07g\x02\x029\x06\x03\x02\x02\x02:;\x07c\x02\x02;<\x07p\x02" +
		"\x02<=\x07f\x02\x02=\b\x03\x02\x02\x02>?\x07q\x02\x02?@\x07t\x02\x02@" +
		"\n\x03\x02\x02\x02AB\x07>\x02\x02B\f\x03\x02\x02\x02CD\x07@\x02\x02D\x0E" +
		"\x03\x02\x02\x02EF\x07?\x02\x02F\x10\x03\x02\x02\x02GH\x07#\x02\x02HI" +
		"\x07?\x02\x02I\x12\x03\x02\x02\x02JK\x07k\x02\x02KL\x07p\x02\x02L\x14" +
		"\x03\x02\x02\x02MN\x07u\x02\x02NO\x07v\x02\x02OP\x07c\x02\x02PQ\x07t\x02" +
		"\x02QR\x07v\x02\x02RS\x07u\x02\x02S\x16\x03\x02\x02\x02TU\x07g\x02\x02" +
		"UV\x07p\x02\x02VW\x07f\x02\x02WX\x07u\x02\x02X\x18\x03\x02\x02\x02YZ\x07" +
		"1\x02\x02Z\x1A\x03\x02\x02\x02[\\\x07]\x02\x02\\\x1C\x03\x02\x02\x02]" +
		"^\x07_\x02\x02^\x1E\x03\x02\x02\x02_`\x07*\x02\x02` \x03\x02\x02\x02a" +
		"b\x07+\x02\x02b\"\x03\x02\x02\x02cd\x07.\x02\x02d$\x03\x02\x02\x02eg\x04" +
		"2;\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02" +
		"\x02\x02i&\x03\x02\x02\x02jl\x042;\x02kj\x03\x02\x02\x02lm\x03\x02\x02" +
		"\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02no\x03\x02\x02\x02os\x070\x02" +
		"\x02pr\x042;\x02qp\x03\x02\x02\x02ru\x03\x02\x02\x02sq\x03\x02\x02\x02" +
		"st\x03\x02\x02\x02t(\x03\x02\x02\x02us\x03\x02\x02\x02vz\x07$\x02\x02" +
		"wy\t\x02\x02\x02xw\x03\x02\x02\x02y|\x03\x02\x02\x02zx\x03\x02\x02\x02" +
		"z{\x03\x02\x02\x02{}\x03\x02\x02\x02|z\x03\x02\x02\x02}~\x07$\x02\x02" +
		"~*\x03\x02\x02\x02\x7F\x83\t\x03\x02\x02\x80\x82\t\x04\x02\x02\x81\x80" +
		"\x03\x02\x02\x02\x82\x85\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x83\x84" +
		"\x03\x02\x02\x02\x84,\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x86\x88" +
		"\t\x05\x02\x02\x87\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x87" +
		"\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x8C" +
		"\b\x17\x02\x02\x8C.\x03\x02\x02\x02\t\x02hmsz\x83\x89\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!FilterLexer.__ATN) {
			FilterLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(FilterLexer._serializedATN));
		}

		return FilterLexer.__ATN;
	}

}

