// Generated from ./src/grammars/Filter.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\u0018\u008d\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003",
    "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007",
    "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0013\u0006\u0013g\n\u0013\r\u0013\u000e\u0013",
    "h\u0003\u0014\u0006\u0014l\n\u0014\r\u0014\u000e\u0014m\u0003\u0014",
    "\u0003\u0014\u0007\u0014r\n\u0014\f\u0014\u000e\u0014u\u000b\u0014\u0003",
    "\u0015\u0003\u0015\u0007\u0015y\n\u0015\f\u0015\u000e\u0015|\u000b\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0007\u0016\u0082\n",
    "\u0016\f\u0016\u000e\u0016\u0085\u000b\u0016\u0003\u0017\u0006\u0017",
    "\u0088\n\u0017\r\u0017\u000e\u0017\u0089\u0003\u0017\u0003\u0017\u0002",
    "\u0002\u0018\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007",
    "\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f",
    "\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+\u0017",
    "-\u0018\u0003\u0002\u0006\u0006\u0002/02;C\\c|\u0005\u0002C\\aac|\u0007",
    "\u0002/02;C\\aac|\u0005\u0002\u000b\f\u000f\u000f\"\"\u0002\u0092\u0002",
    "\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002",
    "\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002",
    "\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002",
    "\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002",
    "\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002",
    "\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002",
    "\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002",
    "\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002",
    "#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003",
    "\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002",
    "\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0003/\u0003\u0002\u0002",
    "\u0002\u00051\u0003\u0002\u0002\u0002\u00076\u0003\u0002\u0002\u0002",
    "\t<\u0003\u0002\u0002\u0002\u000b@\u0003\u0002\u0002\u0002\rC\u0003",
    "\u0002\u0002\u0002\u000fE\u0003\u0002\u0002\u0002\u0011G\u0003\u0002",
    "\u0002\u0002\u0013I\u0003\u0002\u0002\u0002\u0015L\u0003\u0002\u0002",
    "\u0002\u0017O\u0003\u0002\u0002\u0002\u0019V\u0003\u0002\u0002\u0002",
    "\u001b[\u0003\u0002\u0002\u0002\u001d]\u0003\u0002\u0002\u0002\u001f",
    "_\u0003\u0002\u0002\u0002!a\u0003\u0002\u0002\u0002#c\u0003\u0002\u0002",
    "\u0002%f\u0003\u0002\u0002\u0002\'k\u0003\u0002\u0002\u0002)v\u0003",
    "\u0002\u0002\u0002+\u007f\u0003\u0002\u0002\u0002-\u0087\u0003\u0002",
    "\u0002\u0002/0\u0007.\u0002\u00020\u0004\u0003\u0002\u0002\u000212\u0007",
    "v\u0002\u000223\u0007t\u0002\u000234\u0007w\u0002\u000245\u0007g\u0002",
    "\u00025\u0006\u0003\u0002\u0002\u000267\u0007h\u0002\u000278\u0007c",
    "\u0002\u000289\u0007n\u0002\u00029:\u0007u\u0002\u0002:;\u0007g\u0002",
    "\u0002;\b\u0003\u0002\u0002\u0002<=\u0007c\u0002\u0002=>\u0007p\u0002",
    "\u0002>?\u0007f\u0002\u0002?\n\u0003\u0002\u0002\u0002@A\u0007q\u0002",
    "\u0002AB\u0007t\u0002\u0002B\f\u0003\u0002\u0002\u0002CD\u0007>\u0002",
    "\u0002D\u000e\u0003\u0002\u0002\u0002EF\u0007@\u0002\u0002F\u0010\u0003",
    "\u0002\u0002\u0002GH\u0007?\u0002\u0002H\u0012\u0003\u0002\u0002\u0002",
    "IJ\u0007#\u0002\u0002JK\u0007?\u0002\u0002K\u0014\u0003\u0002\u0002",
    "\u0002LM\u0007k\u0002\u0002MN\u0007p\u0002\u0002N\u0016\u0003\u0002",
    "\u0002\u0002OP\u0007u\u0002\u0002PQ\u0007v\u0002\u0002QR\u0007c\u0002",
    "\u0002RS\u0007t\u0002\u0002ST\u0007v\u0002\u0002TU\u0007u\u0002\u0002",
    "U\u0018\u0003\u0002\u0002\u0002VW\u0007g\u0002\u0002WX\u0007p\u0002",
    "\u0002XY\u0007f\u0002\u0002YZ\u0007u\u0002\u0002Z\u001a\u0003\u0002",
    "\u0002\u0002[\\\u00071\u0002\u0002\\\u001c\u0003\u0002\u0002\u0002]",
    "^\u0007]\u0002\u0002^\u001e\u0003\u0002\u0002\u0002_`\u0007_\u0002\u0002",
    "` \u0003\u0002\u0002\u0002ab\u0007*\u0002\u0002b\"\u0003\u0002\u0002",
    "\u0002cd\u0007+\u0002\u0002d$\u0003\u0002\u0002\u0002eg\u00042;\u0002",
    "fe\u0003\u0002\u0002\u0002gh\u0003\u0002\u0002\u0002hf\u0003\u0002\u0002",
    "\u0002hi\u0003\u0002\u0002\u0002i&\u0003\u0002\u0002\u0002jl\u00042",
    ";\u0002kj\u0003\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mk\u0003",
    "\u0002\u0002\u0002mn\u0003\u0002\u0002\u0002no\u0003\u0002\u0002\u0002",
    "os\u00070\u0002\u0002pr\u00042;\u0002qp\u0003\u0002\u0002\u0002ru\u0003",
    "\u0002\u0002\u0002sq\u0003\u0002\u0002\u0002st\u0003\u0002\u0002\u0002",
    "t(\u0003\u0002\u0002\u0002us\u0003\u0002\u0002\u0002vz\u0007$\u0002",
    "\u0002wy\t\u0002\u0002\u0002xw\u0003\u0002\u0002\u0002y|\u0003\u0002",
    "\u0002\u0002zx\u0003\u0002\u0002\u0002z{\u0003\u0002\u0002\u0002{}\u0003",
    "\u0002\u0002\u0002|z\u0003\u0002\u0002\u0002}~\u0007$\u0002\u0002~*",
    "\u0003\u0002\u0002\u0002\u007f\u0083\t\u0003\u0002\u0002\u0080\u0082",
    "\t\u0004\u0002\u0002\u0081\u0080\u0003\u0002\u0002\u0002\u0082\u0085",
    "\u0003\u0002\u0002\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0083\u0084",
    "\u0003\u0002\u0002\u0002\u0084,\u0003\u0002\u0002\u0002\u0085\u0083",
    "\u0003\u0002\u0002\u0002\u0086\u0088\t\u0005\u0002\u0002\u0087\u0086",
    "\u0003\u0002\u0002\u0002\u0088\u0089\u0003\u0002\u0002\u0002\u0089\u0087",
    "\u0003\u0002\u0002\u0002\u0089\u008a\u0003\u0002\u0002\u0002\u008a\u008b",
    "\u0003\u0002\u0002\u0002\u008b\u008c\b\u0017\u0002\u0002\u008c.\u0003",
    "\u0002\u0002\u0002\t\u0002hmsz\u0083\u0089\u0003\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class FilterLexer extends antlr4.Lexer {

    static grammarFileName = "Filter.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "','", "'true'", "'false'", "'and'", "'or'", 
                         "'<'", "'>'", "'='", "'!='", "'in'", "'starts'", 
                         "'ends'", "'/'", "'['", "']'", "'('", "')'" ];
	static symbolicNames = [ null, null, "TRUE", "FALSE", "AND", "OR", "LT", 
                          "GT", "EQ", "NEQ", "IN", "STARTS", "ENDS", "PATHSEP", 
                          "LBRACK", "RBRACK", "LPAREN", "RPAREN", "INT", 
                          "FLOAT", "STRING", "ID", "WS" ];
	static ruleNames = [ "T__0", "TRUE", "FALSE", "AND", "OR", "LT", "GT", 
                      "EQ", "NEQ", "IN", "STARTS", "ENDS", "PATHSEP", "LBRACK", 
                      "RBRACK", "LPAREN", "RPAREN", "INT", "FLOAT", "STRING", 
                      "ID", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

FilterLexer.EOF = antlr4.Token.EOF;
FilterLexer.T__0 = 1;
FilterLexer.TRUE = 2;
FilterLexer.FALSE = 3;
FilterLexer.AND = 4;
FilterLexer.OR = 5;
FilterLexer.LT = 6;
FilterLexer.GT = 7;
FilterLexer.EQ = 8;
FilterLexer.NEQ = 9;
FilterLexer.IN = 10;
FilterLexer.STARTS = 11;
FilterLexer.ENDS = 12;
FilterLexer.PATHSEP = 13;
FilterLexer.LBRACK = 14;
FilterLexer.RBRACK = 15;
FilterLexer.LPAREN = 16;
FilterLexer.RPAREN = 17;
FilterLexer.INT = 18;
FilterLexer.FLOAT = 19;
FilterLexer.STRING = 20;
FilterLexer.ID = 21;
FilterLexer.WS = 22;



